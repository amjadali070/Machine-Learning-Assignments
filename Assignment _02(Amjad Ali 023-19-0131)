{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1N65W33UWle-U3rNDOs7pZgsKss9DJbig","authorship_tag":"ABX9TyNokHohyENEx60BX+sl6pJF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["#### Name : Amjad Ali \n","#### CMS: 023-19-0131\n","#### Machine Learning Assignment 02"],"metadata":{"id":"ROr_P4CizltL"}},{"cell_type":"markdown","source":["# Data Preprocessing and Classification"],"metadata":{"id":"W1mauGnIK_xd"}},{"cell_type":"markdown","source":["####Load the dataset####"],"metadata":{"id":"kjT2h1o6LVhL"}},{"cell_type":"code","source":["import pandas as pd"],"metadata":{"id":"auxSILzaLKZJ","executionInfo":{"status":"ok","timestamp":1666022992193,"user_tz":-300,"elapsed":5,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oS5Dzec4L1mj","executionInfo":{"status":"ok","timestamp":1666023037241,"user_tz":-300,"elapsed":37644,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"8d4e3d86-4d18-4093-ce9c-6ef343e752e9"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/covtype.data')"],"metadata":{"id":"iFvhnXxeMx40","executionInfo":{"status":"ok","timestamp":1666023053907,"user_tz":-300,"elapsed":3772,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["#### Data Preprocessing"],"metadata":{"id":"3PEZd0DVNKCu"}},{"cell_type":"code","source":["data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aqoM9PBOM3bb","executionInfo":{"status":"ok","timestamp":1666023059890,"user_tz":-300,"elapsed":4,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"6cfd54cb-a61b-422a-fdb3-0ad91744db3d"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(581011, 55)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KQk6S99JM513","executionInfo":{"status":"ok","timestamp":1666023069563,"user_tz":-300,"elapsed":909,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"7251624f-2288-486f-c244-15db00e45297"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2596    0\n","51      0\n","3       0\n","258     0\n","0       0\n","510     0\n","221     0\n","232     0\n","148     0\n","6279    0\n","1       0\n","0.1     0\n","0.2     0\n","0.3     0\n","0.4     0\n","0.5     0\n","0.6     0\n","0.7     0\n","0.8     0\n","0.9     0\n","0.10    0\n","0.11    0\n","0.12    0\n","0.13    0\n","0.14    0\n","0.15    0\n","0.16    0\n","0.17    0\n","0.18    0\n","0.19    0\n","0.20    0\n","0.21    0\n","0.22    0\n","0.23    0\n","0.24    0\n","0.25    0\n","0.26    0\n","0.27    0\n","0.28    0\n","0.29    0\n","0.30    0\n","0.31    0\n","1.1     0\n","0.32    0\n","0.33    0\n","0.34    0\n","0.35    0\n","0.36    0\n","0.37    0\n","0.38    0\n","0.39    0\n","0.40    0\n","0.41    0\n","0.42    0\n","5       0\n","dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data = data.dropna(axis=1)"],"metadata":{"id":"37wduiGgNjEQ","executionInfo":{"status":"ok","timestamp":1666023070947,"user_tz":-300,"elapsed":5,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RTOg-VcaN4i4","executionInfo":{"status":"ok","timestamp":1666023070947,"user_tz":-300,"elapsed":5,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"5a4e5abb-efca-460c-feeb-9b7369b70685"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(581011, 55)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i-M3EVI4N8Dk","executionInfo":{"status":"ok","timestamp":1666023070947,"user_tz":-300,"elapsed":4,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"021e98e3-7cb3-4b79-9808-d7c3032a8dd7"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2596    0\n","51      0\n","3       0\n","258     0\n","0       0\n","510     0\n","221     0\n","232     0\n","148     0\n","6279    0\n","1       0\n","0.1     0\n","0.2     0\n","0.3     0\n","0.4     0\n","0.5     0\n","0.6     0\n","0.7     0\n","0.8     0\n","0.9     0\n","0.10    0\n","0.11    0\n","0.12    0\n","0.13    0\n","0.14    0\n","0.15    0\n","0.16    0\n","0.17    0\n","0.18    0\n","0.19    0\n","0.20    0\n","0.21    0\n","0.22    0\n","0.23    0\n","0.24    0\n","0.25    0\n","0.26    0\n","0.27    0\n","0.28    0\n","0.29    0\n","0.30    0\n","0.31    0\n","1.1     0\n","0.32    0\n","0.33    0\n","0.34    0\n","0.35    0\n","0.36    0\n","0.37    0\n","0.38    0\n","0.39    0\n","0.40    0\n","0.41    0\n","0.42    0\n","5       0\n","dtype: int64"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["#### Train and Test Split"],"metadata":{"id":"tggroXCvtwLi"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler"],"metadata":{"id":"YZ5CeNk3PlUx","executionInfo":{"status":"ok","timestamp":1666023150923,"user_tz":-300,"elapsed":681,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["X = data.iloc[:, 0:53].values\n","Y = data.iloc[: , 54].values"],"metadata":{"id":"RPUwTNgYuC_v","executionInfo":{"status":"ok","timestamp":1666023225607,"user_tz":-300,"elapsed":5,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=1)"],"metadata":{"id":"EwDdbw4kuG1W","executionInfo":{"status":"ok","timestamp":1666023356088,"user_tz":-300,"elapsed":1389,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["X.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W08Vk64cuK6o","executionInfo":{"status":"ok","timestamp":1666023359017,"user_tz":-300,"elapsed":3,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"0d399d62-d2bc-45ca-81dd-b5abc52ed081"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(581011, 53)"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["Y.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gsJ2YgxYuRtu","executionInfo":{"status":"ok","timestamp":1666023360476,"user_tz":-300,"elapsed":3,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"ec24e7a2-e591-4142-8658-bc83a8311253"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(581011,)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["scaler = StandardScaler()\n","scale = scaler.fit(X_train)\n","X_train = scale.transform(X_train)\n","X_test = scale.transform(X_test)"],"metadata":{"id":"z_RLjJOgRdru","executionInfo":{"status":"ok","timestamp":1666023362537,"user_tz":-300,"elapsed":7,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["print(\"X_train:\", X_train.shape)\n","print(\"X_test:\", X_test.shape)\n","print(\"Y_train:\", Y_train.shape)\n","print(\"Y_test:\", Y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XQzuS_8AuMBy","executionInfo":{"status":"ok","timestamp":1666023378693,"user_tz":-300,"elapsed":3,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"88abb67c-afb2-40e4-e629-24b7a6e1642d"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train: (406707, 53)\n","X_test: (174304, 53)\n","Y_train: (406707,)\n","Y_test: (174304,)\n"]}]},{"cell_type":"code","source":["X_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qpt5k4AiugmA","executionInfo":{"status":"ok","timestamp":1666023381043,"user_tz":-300,"elapsed":3,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"9b72e209-51ff-4b33-82d1-cf37e2dcb197"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.67334828, -1.11399293,  1.85560743, ..., -0.02278311,\n","        -0.16569734, -0.15621919],\n","       [ 0.05918126,  0.49452937,  0.65370313, ..., -0.02278311,\n","        -0.16569734, -0.15621919],\n","       [-0.09089796, -0.42590284, -0.28111133, ..., -0.02278311,\n","        -0.16569734, -0.15621919],\n","       ...,\n","       [ 0.47368579, -0.61356377, -1.21592578, ..., -0.02278311,\n","        -0.16569734, -0.15621919],\n","       [-0.27313702, -0.72973483,  0.25306836, ..., -0.02278311,\n","        -0.16569734, -0.15621919],\n","       [-0.66977497,  1.5490051 , -0.54820117, ..., -0.02278311,\n","        -0.16569734, -0.15621919]])"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["Y_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rQBOiJIKujP-","executionInfo":{"status":"ok","timestamp":1666023387268,"user_tz":-300,"elapsed":2,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"a7cc9a3b-0cbe-4fec-df6c-f1e4d8fb48f5"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 2, 2, ..., 1, 1, 1])"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","source":["# Adaline"],"metadata":{"id":"vad9d_s7RzD1"}},{"cell_type":"code","source":["class AdalineGD(object):\n","    \"\"\"ADAptive LInear NEuron classifier.\n","\n","    Parameters\n","    ------------\n","    eta : float\n","      Learning rate (between 0.0 and 1.0)\n","    n_iter : int\n","      Passes over the training dataset.\n","    random_state : int\n","      Random number generator seed for random weight\n","      initialization.\n","\n","\n","    Attributes\n","    -----------\n","    w_ : 1d-array\n","      Weights after fitting.\n","    cost_ : list\n","      Sum-of-squares cost function value in each epoch.\n","\n","    \"\"\"\n","    def __init__(self, eta=0.01, n_iter=50, random_state=1):\n","        self.eta = eta\n","        self.n_iter = n_iter\n","        self.random_state = random_state\n","\n","    def fit(self, X, y):\n","        \"\"\" Fit training data.\n","\n","        Parameters\n","        ----------\n","        X : {array-like}, shape = [n_examples, n_features]\n","          Training vectors, where n_examples is the number of examples and\n","          n_features is the number of features.\n","        y : array-like, shape = [n_examples]\n","          Target values.\n","\n","        Returns\n","        -------\n","        self : object\n","\n","        \"\"\"\n","        rgen = np.random.RandomState(self.random_state)\n","        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=1 + X.shape[1])\n","        self.cost_ = []\n","\n","        for i in range(self.n_iter):\n","            net_input = self.net_input(X)\n","            # Please note that the \"activation\" method has no effect\n","            # in the code since it is simply an identity function. We\n","            # could write `output = self.net_input(X)` directly instead.\n","            # The purpose of the activation is more conceptual, i.e.,  \n","            # in the case of logistic regression (as we will see later), \n","            # we could change it to\n","            # a sigmoid function to implement a logistic regression classifier.\n","            output = self.activation(net_input)\n","            errors = (y - output)\n","            self.w_[1:] += self.eta * X.T.dot(errors)\n","            self.w_[0] += self.eta * errors.sum()\n","            cost = (errors**2).sum() / 2.0\n","            self.cost_.append(cost)\n","        return self\n","\n","    def net_input(self, X):\n","        \"\"\"Calculate net input\"\"\"\n","        return np.dot(X, self.w_[1:]) + self.w_[0]\n","\n","    def activation(self, X):\n","        \"\"\"Compute linear activation\"\"\"\n","        return X\n","\n","    def predict(self, X):\n","        \"\"\"Return class label after unit step\"\"\"\n","        return np.where(self.activation(self.net_input(X)) >= 0.0, 1, -1)"],"metadata":{"id":"o8PQIAoPWPn2","executionInfo":{"status":"ok","timestamp":1666023413980,"user_tz":-300,"elapsed":2,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["ada_gd = AdalineGD(n_iter=10, eta=0.01).fit(X, Y)\n","y_pred = ada_gd.predict(X_test)"],"metadata":{"id":"zUN1ZfogRtYo","executionInfo":{"status":"ok","timestamp":1666023473451,"user_tz":-300,"elapsed":1650,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["from sklearn import metrics\n","print(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PjMlMTf2vPpT","executionInfo":{"status":"ok","timestamp":1666023507171,"user_tz":-300,"elapsed":1083,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"4ab41520-61c6-41eb-9c31-e89ed5a417df"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.25326441160271707\n"]}]},{"cell_type":"markdown","source":["# Perceptron"],"metadata":{"id":"qHvXOKAZR1oG"}},{"cell_type":"code","source":["from sklearn.linear_model import Perceptron\n","perceptron = Perceptron(eta0=0.1, random_state=1)\n","perceptron.fit(X_train, Y_train)\n","y_pred = perceptron.predict(X_test)"],"metadata":{"id":"Un7P5x2hR8fo","executionInfo":{"status":"ok","timestamp":1666023684995,"user_tz":-300,"elapsed":6934,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["from sklearn import metrics \n","print(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bZxnyQ-svyZ1","executionInfo":{"status":"ok","timestamp":1666023688430,"user_tz":-300,"elapsed":2,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"8bbeeee3-4061-4f77-cb3b-665493694cb8"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.6172262254451992\n"]}]},{"cell_type":"markdown","source":["# SVM"],"metadata":{"id":"r6zT-sL4wHUz"}},{"cell_type":"code","source":["from sklearn.linear_model import SGDClassifier\n","svm = SGDClassifier(loss='hinge')\n","svm = svm.fit(X_train, Y_train)\n","y_pred = svm.predict(X_test)"],"metadata":{"id":"eSDh9m7YwJ5k","executionInfo":{"status":"ok","timestamp":1666023756603,"user_tz":-300,"elapsed":11358,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["from sklearn import metrics\n","print(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zc49Wh-dwRAk","executionInfo":{"status":"ok","timestamp":1666023766309,"user_tz":-300,"elapsed":7,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"3855a9ed-3107-43a6-8a8e-82459209e0fe"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7136439783366991\n"]}]},{"cell_type":"markdown","source":["# Decision Tree"],"metadata":{"id":"SpgKjBKHwXgl"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","\n","dt_model = DecisionTreeClassifier(criterion='gini', max_depth=4,random_state=1)\n","dt_model = dt_model.fit(X_train, Y_train)\n","y_pred = dt_model.predict(X_test)"],"metadata":{"id":"b2nkCbeVwcpm","executionInfo":{"status":"ok","timestamp":1666023860559,"user_tz":-300,"elapsed":3389,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["from sklearn import metrics\n","print(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zJ1uH3uWwcwI","executionInfo":{"status":"ok","timestamp":1666023873018,"user_tz":-300,"elapsed":4,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"23f1d6ab-225f-4b6c-d36c-fed3fbfadfd4"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7014124747567468\n"]}]},{"cell_type":"markdown","source":["# KNN"],"metadata":{"id":"P7e4Whk3THCl"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"ekmVPndZTIJv","executionInfo":{"status":"ok","timestamp":1666024165579,"user_tz":-300,"elapsed":3,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["KNN = KNeighborsClassifier(n_neighbors=5)\n","KNN.fit(X_train,Y_train)"],"metadata":{"id":"u249RFj5hF76","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666024206290,"user_tz":-300,"elapsed":5,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"a4cda12d-c4f6-4e28-d334-386706e7632c"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier()"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["Acc = KNN.score(X_test,Y_test)\n","print('KNN Accuracy ', Acc)"],"metadata":{"id":"ZWOpPpgLzRf8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Logistic Regression"],"metadata":{"id":"jPRxWY3WTlfC"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","model = LogisticRegression().fit(X_train, Y_train)\n","y_pred = model.predict(X_test)"],"metadata":{"id":"tjTU-ZK3TnO8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666024584625,"user_tz":-300,"elapsed":34029,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"888619c5-536e-4027-9b9e-b27c06961f10"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]}]},{"cell_type":"code","source":["from sklearn import metrics\n","print(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XglBHGWli2hD","executionInfo":{"status":"ok","timestamp":1666024598208,"user_tz":-300,"elapsed":1267,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"219211c3-8909-45c3-e659-9787c7bd8d8f"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7245961079493299\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"-9qtIp4Zzd77"},"execution_count":null,"outputs":[]}]}