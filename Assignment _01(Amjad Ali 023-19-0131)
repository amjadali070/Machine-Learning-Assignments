{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMMjsFWRvbmjNkDQu2gPtIv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Name : Amjad Ali** ||\n","**CMS: 023-19-0131**"],"metadata":{"id":"SW1drTT9cBEB"}},{"cell_type":"markdown","source":["# Algorithms"],"metadata":{"id":"qSdUtVetmQ2Z"}},{"cell_type":"markdown","source":["Perceptron"],"metadata":{"id":"kWaihnM6mEWB"}},{"cell_type":"code","source":["from sklearn.linear_model import Perceptron, LogisticRegression\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"B8AH32PGcHPq","executionInfo":{"status":"ok","timestamp":1665165702826,"user_tz":-300,"elapsed":3316,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('diabetes.csv')\n","df.head"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PIqBI8FVcJqJ","executionInfo":{"status":"ok","timestamp":1665165703746,"user_tz":-300,"elapsed":68,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"4f9a1ead-685e-460f-fe3b-e61fe80ee362"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method NDFrame.head of      col2  col2.1  col3  col4  col5  col6   col7  col8  y\n","0       6     148    72    35     0  33.6  0.627    50  1\n","1       1      85    66    29     0  26.6  0.351    31  0\n","2       8     183    64     0     0  23.3  0.672    32  1\n","3       1      89    66    23    94  28.1  0.167    21  0\n","4       0     137    40    35   168  43.1  2.288    33  1\n","..    ...     ...   ...   ...   ...   ...    ...   ... ..\n","763    10     101    76    48   180  32.9  0.171    63  0\n","764     2     122    70    27     0  36.8  0.340    27  0\n","765     5     121    72    23   112  26.2  0.245    30  0\n","766     1     126    60     0     0  30.1  0.349    47  1\n","767     1      93    70    31     0  30.4  0.315    23  0\n","\n","[768 rows x 9 columns]>"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"fI8ynpMQcJsz","executionInfo":{"status":"ok","timestamp":1665165703747,"user_tz":-300,"elapsed":65,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"bc14d81b-5ed6-4e2e-8778-b3a431f9ed82"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     col2  col2.1  col3  col4  col5  col6   col7  col8  y\n","0       6     148    72    35     0  33.6  0.627    50  1\n","1       1      85    66    29     0  26.6  0.351    31  0\n","2       8     183    64     0     0  23.3  0.672    32  1\n","3       1      89    66    23    94  28.1  0.167    21  0\n","4       0     137    40    35   168  43.1  2.288    33  1\n","..    ...     ...   ...   ...   ...   ...    ...   ... ..\n","763    10     101    76    48   180  32.9  0.171    63  0\n","764     2     122    70    27     0  36.8  0.340    27  0\n","765     5     121    72    23   112  26.2  0.245    30  0\n","766     1     126    60     0     0  30.1  0.349    47  1\n","767     1      93    70    31     0  30.4  0.315    23  0\n","\n","[768 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-48b1a702-4dba-4a5b-ba1a-ed77b4c2d074\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>col2</th>\n","      <th>col2.1</th>\n","      <th>col3</th>\n","      <th>col4</th>\n","      <th>col5</th>\n","      <th>col6</th>\n","      <th>col7</th>\n","      <th>col8</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>40</td>\n","      <td>35</td>\n","      <td>168</td>\n","      <td>43.1</td>\n","      <td>2.288</td>\n","      <td>33</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>763</th>\n","      <td>10</td>\n","      <td>101</td>\n","      <td>76</td>\n","      <td>48</td>\n","      <td>180</td>\n","      <td>32.9</td>\n","      <td>0.171</td>\n","      <td>63</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>764</th>\n","      <td>2</td>\n","      <td>122</td>\n","      <td>70</td>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>36.8</td>\n","      <td>0.340</td>\n","      <td>27</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>765</th>\n","      <td>5</td>\n","      <td>121</td>\n","      <td>72</td>\n","      <td>23</td>\n","      <td>112</td>\n","      <td>26.2</td>\n","      <td>0.245</td>\n","      <td>30</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>766</th>\n","      <td>1</td>\n","      <td>126</td>\n","      <td>60</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.1</td>\n","      <td>0.349</td>\n","      <td>47</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>767</th>\n","      <td>1</td>\n","      <td>93</td>\n","      <td>70</td>\n","      <td>31</td>\n","      <td>0</td>\n","      <td>30.4</td>\n","      <td>0.315</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>768 rows Ã— 9 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48b1a702-4dba-4a5b-ba1a-ed77b4c2d074')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-48b1a702-4dba-4a5b-ba1a-ed77b4c2d074 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-48b1a702-4dba-4a5b-ba1a-ed77b4c2d074');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","source":["**Normalization**\n","\n","\n","1.   Dealing with missing Data\n","\n"],"metadata":{"id":"rBtnEe-5chRC"}},{"cell_type":"code","source":["df = df[df['col2'] != 0]\n","df = df[df['col3'] != 0]\n","df = df[df['col4'] != 0]\n","df = df[df['col6'] != 0]\n","df = df[df['col5'] != 0]\n","df = df[df['col7'] != 0]\n","df = df[df['col8'] != 0]"],"metadata":{"id":"ISS0-gf0cJvp","executionInfo":{"status":"ok","timestamp":1665165703748,"user_tz":-300,"elapsed":60,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"P0fuwSTwm9_O","executionInfo":{"status":"ok","timestamp":1665165703753,"user_tz":-300,"elapsed":64,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"24850e5e-2cc1-4cee-d2df-a9507bb138a4"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     col2  col2.1  col3  col4  col5  col6   col7  col8  y\n","3       1      89    66    23    94  28.1  0.167    21  0\n","6       3      78    50    32    88  31.0  0.248    26  1\n","8       2     197    70    45   543  30.5  0.158    53  1\n","13      1     189    60    23   846  30.1  0.398    59  1\n","14      5     166    72    19   175  25.8  0.587    51  1\n","..    ...     ...   ...   ...   ...   ...    ...   ... ..\n","751     1     121    78    39    74  39.0  0.261    28  0\n","755     1     128    88    39   110  36.5  1.057    37  1\n","760     2      88    58    26    16  28.4  0.766    22  0\n","763    10     101    76    48   180  32.9  0.171    63  0\n","765     5     121    72    23   112  26.2  0.245    30  0\n","\n","[337 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-b4e93a4f-f929-45ef-a4e8-de3682d48187\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>col2</th>\n","      <th>col2.1</th>\n","      <th>col3</th>\n","      <th>col4</th>\n","      <th>col5</th>\n","      <th>col6</th>\n","      <th>col7</th>\n","      <th>col8</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>3</td>\n","      <td>78</td>\n","      <td>50</td>\n","      <td>32</td>\n","      <td>88</td>\n","      <td>31.0</td>\n","      <td>0.248</td>\n","      <td>26</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>2</td>\n","      <td>197</td>\n","      <td>70</td>\n","      <td>45</td>\n","      <td>543</td>\n","      <td>30.5</td>\n","      <td>0.158</td>\n","      <td>53</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>1</td>\n","      <td>189</td>\n","      <td>60</td>\n","      <td>23</td>\n","      <td>846</td>\n","      <td>30.1</td>\n","      <td>0.398</td>\n","      <td>59</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>5</td>\n","      <td>166</td>\n","      <td>72</td>\n","      <td>19</td>\n","      <td>175</td>\n","      <td>25.8</td>\n","      <td>0.587</td>\n","      <td>51</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>751</th>\n","      <td>1</td>\n","      <td>121</td>\n","      <td>78</td>\n","      <td>39</td>\n","      <td>74</td>\n","      <td>39.0</td>\n","      <td>0.261</td>\n","      <td>28</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>755</th>\n","      <td>1</td>\n","      <td>128</td>\n","      <td>88</td>\n","      <td>39</td>\n","      <td>110</td>\n","      <td>36.5</td>\n","      <td>1.057</td>\n","      <td>37</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>760</th>\n","      <td>2</td>\n","      <td>88</td>\n","      <td>58</td>\n","      <td>26</td>\n","      <td>16</td>\n","      <td>28.4</td>\n","      <td>0.766</td>\n","      <td>22</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>763</th>\n","      <td>10</td>\n","      <td>101</td>\n","      <td>76</td>\n","      <td>48</td>\n","      <td>180</td>\n","      <td>32.9</td>\n","      <td>0.171</td>\n","      <td>63</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>765</th>\n","      <td>5</td>\n","      <td>121</td>\n","      <td>72</td>\n","      <td>23</td>\n","      <td>112</td>\n","      <td>26.2</td>\n","      <td>0.245</td>\n","      <td>30</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>337 rows Ã— 9 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4e93a4f-f929-45ef-a4e8-de3682d48187')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b4e93a4f-f929-45ef-a4e8-de3682d48187 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b4e93a4f-f929-45ef-a4e8-de3682d48187');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["X, y = df.iloc[:, 0:8].values, df.iloc[:, 8].values\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=y)"],"metadata":{"id":"FBvBAnwgcJyP","executionInfo":{"status":"ok","timestamp":1665165703759,"user_tz":-300,"elapsed":66,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6pRGmPVVcJ1F","executionInfo":{"status":"ok","timestamp":1665165703760,"user_tz":-300,"elapsed":66,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"50823866-604a-4f98-82c1-174959360e8b"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n","       0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n","       0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n","       0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n","       0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0,\n","       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0,\n","       1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n","       1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n","       0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n","       0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,\n","       0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,\n","       1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0,\n","       1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0,\n","       0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,\n","       0, 1, 0, 1, 0, 0, 0])"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nu4ao-iocJ4v","executionInfo":{"status":"ok","timestamp":1665165704260,"user_tz":-300,"elapsed":560,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"a8b03494-0665-4aa0-9d79-ddef9abb71e7"},"execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1.00e+00, 8.90e+01, 6.60e+01, ..., 2.81e+01, 1.67e-01, 2.10e+01],\n","       [3.00e+00, 7.80e+01, 5.00e+01, ..., 3.10e+01, 2.48e-01, 2.60e+01],\n","       [2.00e+00, 1.97e+02, 7.00e+01, ..., 3.05e+01, 1.58e-01, 5.30e+01],\n","       ...,\n","       [2.00e+00, 8.80e+01, 5.80e+01, ..., 2.84e+01, 7.66e-01, 2.20e+01],\n","       [1.00e+01, 1.01e+02, 7.60e+01, ..., 3.29e+01, 1.71e-01, 6.30e+01],\n","       [5.00e+00, 1.21e+02, 7.20e+01, ..., 2.62e+01, 2.45e-01, 3.00e+01]])"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","stdsc = StandardScaler()\n","X_train[:, 1:6] = stdsc.fit_transform(X_train[:, 1:6])\n","X_test[:, 1:6] = stdsc.transform(X_test[:, 1:6])\n","X_train_std = X_train\n","X_test_std = X_test"],"metadata":{"id":"jQYtYVm2cJ60","executionInfo":{"status":"ok","timestamp":1665165704261,"user_tz":-300,"elapsed":75,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["X_train_std"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Z7ig4PocJ9J","executionInfo":{"status":"ok","timestamp":1665165704261,"user_tz":-300,"elapsed":73,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"d344ebd3-698a-4c7c-e931-f482cfe04208"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.00000000e+00, -1.01920755e+00, -4.00852697e-01, ...,\n","        -6.42301767e-01,  1.67000000e-01,  2.10000000e+01],\n","       [ 4.00000000e+00, -3.69363978e-01,  4.61788180e-01, ...,\n","        -5.92475321e-01,  1.18000000e-01,  2.70000000e+01],\n","       [ 3.00000000e+00, -1.48338154e+00, -2.28324521e-01, ...,\n","        -3.76560719e-01,  2.93000000e-01,  2.30000000e+01],\n","       ...,\n","       [ 1.00000000e+00,  2.07528567e+00, -9.18437223e-01, ...,\n","        -3.10125457e-01,  3.98000000e-01,  5.90000000e+01],\n","       [ 4.00000000e+00, -1.17393222e+00,  1.66948541e+00, ...,\n","         1.25110320e+00,  1.59000000e-01,  2.50000000e+01],\n","       [ 1.50000000e+01,  4.35204259e-01, -5.57963461e-02, ...,\n","         8.52491628e-01,  1.53000000e-01,  4.30000000e+01]])"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["X_test_std"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zx_Q3IUEcKAi","executionInfo":{"status":"ok","timestamp":1665165704262,"user_tz":-300,"elapsed":70,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"5e88e7c7-96c6-4596-99c0-ded580e61249"},"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.00000000e+00, -1.83694385e-01,  6.34316355e-01,\n","         8.67752413e-02,  1.82051614e-01,  6.86403473e-01,\n","         4.96000000e-01,  2.50000000e+01],\n","       [ 6.00000000e+00,  3.73314395e-01,  8.06844531e-01,\n","         8.78704628e-01,  1.71952174e+00,  2.36389384e+00,\n","         2.38000000e-01,  4.60000000e+01],\n","       [ 7.00000000e+00, -2.45584249e-01,  4.61788180e-01,\n","        -1.10111884e+00, -3.84384749e-01, -1.35648083e+00,\n","         4.66000000e-01,  3.10000000e+01],\n","       [ 1.30000000e+01,  9.30323174e-01,  1.66948541e+00,\n","         4.82739935e-01, -1.03983254e+00, -8.58216369e-01,\n","         7.31000000e-01,  4.30000000e+01],\n","       [ 1.00000000e+00, -2.89697238e-02,  6.34316355e-01,\n","         1.07668697e+00, -6.75694879e-01,  1.16805912e+00,\n","         2.61000000e-01,  2.80000000e+01],\n","       [ 4.00000000e+00, -7.09758232e-01,  4.61788180e-01,\n","        -1.29910119e+00, -8.61809684e-01, -1.45613373e+00,\n","         2.23000000e-01,  2.10000000e+01],\n","       [ 1.00000000e+00, -7.09758232e-01,  1.16731829e-01,\n","         1.85766415e-01, -1.12884397e+00,  1.10162386e+00,\n","         4.12000000e-01,  2.10000000e+01],\n","       [ 9.00000000e+00,  1.51827689e+00,  3.39476716e+00,\n","        -4.08180625e-01,  6.67568497e-01,  2.23102332e+00,\n","         7.21000000e-01,  5.40000000e+01],\n","       [ 2.00000000e+00,  3.29201406e-02, -1.95360627e+00,\n","         3.83748761e-01,  6.06723935e-02,  1.68293240e+00,\n","         5.20000000e-01,  2.60000000e+01],\n","       [ 1.00000000e+00, -5.99146560e-02,  8.06844531e-01,\n","         1.96760753e+00,  3.43890575e-01,  1.15145031e+00,\n","         1.16200000e+00,  4.10000000e+01],\n","       [ 4.00000000e+00,  6.82763717e-01, -1.09096540e+00,\n","        -1.22159320e-02, -1.41626308e-01, -4.09778350e-01,\n","         2.87000000e-01,  3.70000000e+01],\n","       [ 1.00000000e+01,  1.20882756e+00, -2.28324521e-01,\n","        -5.07171799e-01, -2.06361892e-01, -1.07413097e+00,\n","         3.26000000e-01,  4.70000000e+01],\n","       [ 6.00000000e+00, -7.40703164e-01, -1.09096540e+00,\n","         4.82739935e-01,  2.62971095e-01,  3.37618348e-01,\n","         4.30000000e-01,  4.30000000e+01],\n","       [ 1.00000000e+00, -1.11204235e+00, -4.00852697e-01,\n","         2.36357223e+00, -7.48522412e-01,  1.55006188e+00,\n","         9.17000000e-01,  2.90000000e+01],\n","       [ 1.00000000e+00, -1.08109742e+00,  6.34316355e-01,\n","        -1.11207105e-01, -1.01555670e+00,  4.37271241e-01,\n","         1.01000000e-01,  2.20000000e+01],\n","       [ 3.00000000e+00,  2.18589734e-01, -5.73380872e-01,\n","         8.67752413e-02, -3.43925009e-01, -9.24651631e-01,\n","         2.19000000e-01,  2.80000000e+01],\n","       [ 6.00000000e+00,  9.92213039e-01,  6.34316355e-01,\n","         1.27466932e+00, -1.41626308e-01,  2.34728502e+00,\n","         5.71000000e-01,  2.70000000e+01],\n","       [ 1.00000000e+00,  1.87644802e-01, -1.95360627e+00,\n","         1.67063401e+00,  2.95338887e-01,  1.41719136e+00,\n","         6.13000000e-01,  2.40000000e+01],\n","       [ 1.00000000e+00,  2.49534666e-01, -9.18437223e-01,\n","        -5.07171799e-01,  1.01132134e-01, -5.59257690e-01,\n","         6.92000000e-01,  2.10000000e+01],\n","       [ 1.00000000e+00, -6.78813300e-01, -4.00852697e-01,\n","        -1.29910119e+00, -8.21349944e-01, -1.38969847e+00,\n","         6.66000000e-01,  2.60000000e+01],\n","       [ 2.00000000e+00,  1.97520844e-03, -1.60854992e+00,\n","         1.47265167e+00,  4.02875712e-03,  7.03012289e-01,\n","         8.16000000e-01,  2.80000000e+01],\n","       [ 6.00000000e+00,  3.29201406e-02,  1.16731829e-01,\n","         1.67063401e+00,  5.86649017e-01,  2.71183086e-01,\n","         7.33000000e-01,  3.40000000e+01],\n","       [ 1.00000000e+00, -1.08109742e+00, -9.18437223e-01,\n","         8.78704628e-01, -6.67602931e-01,  8.69100444e-01,\n","         5.09000000e-01,  2.20000000e+01],\n","       [ 1.00000000e+00, -9.08595881e-02,  1.32442906e+00,\n","         1.07668697e+00,  5.05729536e-01,  2.26424095e+00,\n","         8.08000000e-01,  2.90000000e+01],\n","       [ 2.00000000e+00, -5.24088639e-01,  8.06844531e-01,\n","         1.67063401e+00,  2.71063043e-01,  2.87791901e-01,\n","         7.11000000e-01,  2.90000000e+01],\n","       [ 8.00000000e+00,  1.82772621e+00, -2.28324521e-01,\n","         7.79713455e-01,  2.73101525e+00, -3.10125457e-01,\n","         6.15000000e-01,  6.00000000e+01],\n","       [ 2.00000000e+00, -3.07474114e-01,  6.34316355e-01,\n","         2.16558988e+00, -1.41626308e-01,  1.23449439e+00,\n","         1.75000000e-01,  2.40000000e+01],\n","       [ 3.00000000e+00, -1.20487715e+00, -1.09096540e+00,\n","         2.84757588e-01, -1.12884397e+00,  3.87444794e-01,\n","         3.36000000e-01,  2.50000000e+01],\n","       [ 7.00000000e+00, -1.20487715e+00,  6.34316355e-01,\n","        -2.10198279e-01, -6.99970723e-01, -4.42995981e-01,\n","         7.67000000e-01,  3.60000000e+01],\n","       [ 3.00000000e+00,  1.67300155e+00,  1.32442906e+00,\n","        -1.11207105e-01, -1.21551390e-02,  2.21356639e-01,\n","         1.15400000e+00,  5.20000000e+01],\n","       [ 1.00000000e+00, -1.57621633e+00,  6.34316355e-01,\n","         2.16558988e+00, -9.10361373e-01,  2.04747824e-01,\n","         4.22000000e-01,  2.10000000e+01],\n","       [ 1.00000000e+00, -4.00308910e-01, -1.09096540e+00,\n","        -1.00212767e+00, -3.35833061e-01, -5.75866505e-01,\n","         2.19000000e-01,  2.20000000e+01],\n","       [ 7.00000000e+00, -1.26676701e+00,  6.34316355e-01,\n","         1.17567815e+00, -8.86085529e-01,  2.44693792e+00,\n","         2.61000000e-01,  4.20000000e+01],\n","       [ 6.00000000e+00, -8.95427825e-01, -1.78107810e+00,\n","         1.85766415e-01, -7.56614360e-01, -5.42648874e-01,\n","         3.56000000e-01,  2.30000000e+01],\n","       [ 1.00000000e+00, -9.26372757e-01, -7.45909047e-01,\n","        -3.09189452e-01, -9.42729165e-01, -2.07065990e+00,\n","         4.82000000e-01,  2.50000000e+01],\n","       [ 6.00000000e+00,  8.99378242e-01, -7.45909047e-01,\n","         2.84757588e-01, -3.03465269e-01,  5.86750580e-01,\n","         6.92000000e-01,  2.80000000e+01],\n","       [ 1.00000000e+00, -7.71648096e-01, -5.73380872e-01,\n","        -9.03136492e-01, -6.10959295e-01, -2.28657450e+00,\n","         2.99000000e-01,  2.10000000e+01],\n","       [ 2.00000000e+00, -5.99146560e-02,  4.61788180e-01,\n","         8.78704628e-01, -4.24844490e-01,  1.28432083e+00,\n","         2.15000000e-01,  2.90000000e+01],\n","       [ 1.00000000e+00, -6.78813300e-01,  2.89260005e-01,\n","        -1.59607471e+00, -9.02269425e-01, -2.07065990e+00,\n","         1.49000000e-01,  2.80000000e+01],\n","       [ 1.00000000e+00, -1.52749453e-01, -9.18437223e-01,\n","        -5.07171799e-01, -4.16752542e-01,  3.04400717e-01,\n","         4.66000000e-01,  2.70000000e+01],\n","       [ 5.00000000e+00,  1.11599277e+00,  1.15190088e+00,\n","         1.27466932e+00,  4.24810056e-01,  1.23449439e+00,\n","         3.95000000e-01,  2.90000000e+01],\n","       [ 5.00000000e+00, -1.11204235e+00, -2.28324521e-01,\n","        -1.22159320e-02, -6.99970723e-01, -2.93516642e-01,\n","         3.64000000e-01,  2.40000000e+01],\n","       [ 1.00000000e+00, -5.85978503e-01, -3.50635985e+00,\n","         9.77695801e-01, -6.02867347e-01,  1.88223819e+00,\n","         1.83000000e-01,  3.30000000e+01],\n","       [ 2.00000000e+00, -1.52749453e-01,  1.66948541e+00,\n","        -9.03136492e-01, -6.99970723e-01, -1.12395742e+00,\n","         3.13000000e-01,  2.10000000e+01],\n","       [ 1.00000000e+00, -1.21804520e-01, -1.09096540e+00,\n","         7.79713455e-01, -5.13855918e-01,  2.21356639e-01,\n","         2.61000000e-01,  2.30000000e+01],\n","       [ 2.00000000e+00,  9.48100050e-02, -9.18437223e-01,\n","        -8.04145319e-01, -1.41626308e-01,  3.04400717e-01,\n","         8.80000000e-02,  3.10000000e+01],\n","       [ 4.00000000e+00,  9.92213039e-01, -7.45909047e-01,\n","         2.84757588e-01,  1.02361421e+00,  1.38312562e-01,\n","         2.37000000e-01,  2.30000000e+01],\n","       [ 3.00000000e+00,  1.58016675e+00,  9.79372706e-01,\n","         1.96760753e+00,  2.48825681e+00,  1.06840623e+00,\n","         2.13700000e+00,  2.50000000e+01],\n","       [ 8.00000000e+00,  2.29190019e+00,  4.61788180e-01,\n","         8.67752413e-02,  9.91246420e-01,  9.18926890e-01,\n","         6.05000000e-01,  5.70000000e+01],\n","       [ 1.00000000e+00, -4.31253842e-01, -9.18437223e-01,\n","         1.76962519e+00,  1.65867718e-01,  5.86750580e-01,\n","         4.15000000e-01,  2.40000000e+01],\n","       [ 1.70000000e+01,  1.27071743e+00,  1.16731829e-01,\n","         1.27466932e+00, -3.52016957e-01,  1.48362662e+00,\n","         8.17000000e-01,  4.70000000e+01],\n","       [ 2.00000000e+00, -4.31253842e-01, -7.45909047e-01,\n","        -1.79405705e+00,  9.75062523e-01, -1.10734860e+00,\n","         8.81000000e-01,  2.20000000e+01],\n","       [ 1.00000000e+00, -2.45584249e-01, -4.00852697e-01,\n","         7.79713455e-01,  3.43890575e-01,  1.01857978e+00,\n","         2.89000000e-01,  2.10000000e+01],\n","       [ 3.00000000e+00,  2.13717553e+00, -2.28324521e-01,\n","        -1.29910119e+00, -2.22545788e-01, -1.77254933e-01,\n","         2.99000000e-01,  3.40000000e+01],\n","       [ 5.00000000e+00,  2.01339580e+00,  4.61788180e-01,\n","        -1.11207105e-01,  4.00534212e-01,  1.93206464e+00,\n","         1.03400000e+00,  5.30000000e+01],\n","       [ 1.00000000e+00,  9.61268107e-01,  9.79372706e-01,\n","         1.37366049e+00,  2.65009577e+00,  1.43380017e+00,\n","         6.87000000e-01,  2.30000000e+01],\n","       [ 9.00000000e+00, -3.07474114e-01,  9.79372706e-01,\n","         3.83748761e-01,  1.41591874e-01,  3.70835979e-01,\n","         2.60000000e-01,  3.60000000e+01],\n","       [ 6.00000000e+00, -5.85978503e-01,  1.16731829e-01,\n","         3.83748761e-01,  2.62971095e-01,  9.52144521e-01,\n","         3.24000000e-01,  5.50000000e+01],\n","       [ 4.00000000e+00,  8.06543446e-01, -9.18437223e-01,\n","        -1.11207105e-01,  1.29874045e+00, -1.77254933e-01,\n","         1.50000000e-01,  2.90000000e+01],\n","       [ 8.00000000e+00, -4.00308910e-01,  4.61788180e-01,\n","         1.07668697e+00, -3.52016957e-01, -6.75519398e-01,\n","         6.40000000e-01,  3.10000000e+01],\n","       [ 3.00000000e+00,  3.29201406e-02,  2.53212628e+00,\n","         6.80722281e-01,  6.67568497e-01,  4.20747236e+00,\n","         8.80000000e-01,  2.20000000e+01],\n","       [ 2.00000000e+00, -4.31253842e-01, -1.60854992e+00,\n","        -2.10198279e-01, -7.64706308e-01,  8.84861150e-02,\n","         3.18000000e-01,  2.20000000e+01],\n","       [ 1.00000000e+00,  1.87644802e-01,  1.49695723e+00,\n","         1.07668697e+00, -3.84384749e-01,  7.52838735e-01,\n","         1.05700000e+00,  3.70000000e+01],\n","       [ 2.00000000e+00, -8.64482893e-01, -2.28324521e-01,\n","        -1.00212767e+00, -6.59510983e-01, -9.91086893e-01,\n","         5.61000000e-01,  2.10000000e+01],\n","       [ 2.00000000e+00, -8.02593029e-01, -2.28324521e-01,\n","        -1.49708353e+00, -8.77993581e-01, -1.80491885e+00,\n","         6.47000000e-01,  2.60000000e+01],\n","       [ 7.00000000e+00,  2.18589734e-01, -2.28324521e-01,\n","         2.06659871e+00, -2.63005529e-01,  1.08501505e+00,\n","         4.39000000e-01,  4.30000000e+01],\n","       [ 7.00000000e+00,  2.01339580e+00, -1.78107810e+00,\n","         4.82739935e-01,  1.89754460e+00,  3.21009532e-01,\n","         8.26000000e-01,  3.40000000e+01],\n","       [ 1.20000000e+01, -6.78813300e-01,  1.15190088e+00,\n","         4.82739935e-01, -4.24844490e-01, -3.26734273e-01,\n","         4.88000000e-01,  4.60000000e+01],\n","       [ 6.00000000e+00, -9.26372757e-01, -7.45909047e-01,\n","         3.83748761e-01, -2.54913581e-01,  5.44203742e-03,\n","         8.50000000e-02,  4.60000000e+01],\n","       [ 8.00000000e+00,  6.38650728e-02,  4.61788180e-01,\n","        -4.08180625e-01,  3.58066980e+00, -5.42648874e-01,\n","         6.87000000e-01,  5.20000000e+01],\n","       [ 2.00000000e+00, -6.78813300e-01, -1.43602175e+00,\n","        -1.22159320e-02, -4.24844490e-01,  9.68753337e-01,\n","         4.98000000e-01,  2.40000000e+01],\n","       [ 1.00000000e+00, -4.00308910e-01, -9.18437223e-01,\n","        -1.99203940e+00,  1.98235510e-01, -1.09073979e+00,\n","         9.47000000e-01,  2.10000000e+01],\n","       [ 3.00000000e+00, -2.76529181e-01, -1.78107810e+00,\n","        -1.79405705e+00, -5.86683451e-01, -4.09778350e-01,\n","         6.26000000e-01,  2.50000000e+01],\n","       [ 3.00000000e+00,  6.38650728e-02,  8.06844531e-01,\n","         4.82739935e-01, -2.22545788e-01,  2.04747824e-01,\n","         3.05000000e-01,  2.60000000e+01],\n","       [ 2.00000000e+00, -8.33537961e-01, -1.43602175e+00,\n","        -1.39809236e+00, -5.62407607e-01, -9.74478078e-01,\n","         7.48000000e-01,  2.20000000e+01],\n","       [ 6.00000000e+00, -5.24088639e-01, -5.57963461e-02,\n","         3.83748761e-01, -7.24246568e-01, -1.93863749e-01,\n","         1.22000000e-01,  3.70000000e+01],\n","       [ 4.00000000e+00, -4.00308910e-01, -5.73380872e-01,\n","         1.57164284e+00, -4.73396178e-01,  4.70488872e-01,\n","         9.05000000e-01,  2.60000000e+01],\n","       [ 6.00000000e+00, -9.08595881e-02, -1.78107810e+00,\n","        -6.06162972e-01,  1.49683822e-01, -8.08389923e-01,\n","         1.31800000e+00,  3.30000000e+01],\n","       [ 4.00000000e+00,  1.58016675e+00, -5.57963461e-02,\n","        -1.39809236e+00,  8.49482376e-02, -3.76560719e-01,\n","         3.61000000e-01,  3.30000000e+01],\n","       [ 2.00000000e+00,  1.87644802e-01,  6.34316355e-01,\n","         8.78704628e-01,  1.98235510e-01,  1.88223819e+00,\n","         1.22400000e+00,  3.10000000e+01],\n","       [ 3.00000000e+00, -3.38419046e-01, -1.09096540e+00,\n","         2.84757588e-01, -9.18453321e-01, -4.09778350e-01,\n","         4.30000000e-01,  2.20000000e+01],\n","       [ 2.00000000e+00, -3.07474114e-01,  1.32442906e+00,\n","         1.37366049e+00,  2.02126532e-02,  1.06840623e+00,\n","         2.46000000e-01,  2.80000000e+01],\n","       [ 3.00000000e+00, -8.02593029e-01, -1.26349357e+00,\n","         5.81731108e-01, -3.43925009e-01, -1.20700149e+00,\n","         9.44000000e-01,  3.90000000e+01],\n","       [ 3.00000000e+00, -1.35960181e+00, -1.78107810e+00,\n","         3.83748761e-01, -5.62407607e-01, -1.60646118e-01,\n","         2.48000000e-01,  2.60000000e+01],\n","       [ 8.00000000e+00,  1.67300155e+00,  1.66948541e+00,\n","         5.81731108e-01,  1.15308538e+00,  2.87791901e-01,\n","         4.67000000e-01,  5.80000000e+01],\n","       [ 4.00000000e+00, -8.02593029e-01, -1.26349357e+00,\n","        -1.10111884e+00, -8.77993581e-01, -1.85474530e+00,\n","         3.40000000e-01,  2.60000000e+01],\n","       [ 1.00000000e+00, -1.01920755e+00, -4.02394438e+00,\n","        -9.03136492e-01, -1.07220033e+00, -6.92128214e-01,\n","         5.59000000e-01,  2.10000000e+01],\n","       [ 1.00000000e+00, -6.47868368e-01, -1.78107810e+00,\n","        -1.29910119e+00, -9.83188905e-01, -1.29004557e+00,\n","         5.26000000e-01,  2.60000000e+01],\n","       [ 2.00000000e+00, -9.88262622e-01,  8.06844531e-01,\n","        -1.39809236e+00, -8.29441892e-01, -1.25682794e+00,\n","         2.49000000e-01,  2.40000000e+01],\n","       [ 3.00000000e+00,  1.58016675e+00,  6.34316355e-01,\n","         1.07668697e+00,  2.22511355e-01,  3.04400717e-01,\n","         9.70000000e-01,  3.10000000e+01],\n","       [ 5.00000000e+00, -7.09758232e-01, -1.43602175e+00,\n","        -1.22159320e-02, -6.02867347e-01,  3.37618348e-01,\n","         4.99000000e-01,  3.00000000e+01],\n","       [ 1.10000000e+01,  4.97094124e-01,  2.89260005e-01,\n","        -2.10198279e-01, -1.09258516e-01,  6.86403473e-01,\n","         5.57000000e-01,  5.00000000e+01],\n","       [ 4.00000000e+00,  9.48100050e-02, -5.57963461e-02,\n","        -1.00212767e+00, -2.87281373e-01, -5.09431243e-01,\n","         1.14400000e+00,  4.50000000e+01],\n","       [ 2.00000000e+00, -6.47868368e-01, -1.09096540e+00,\n","         6.80722281e-01, -5.46223710e-01, -1.68865714e+00,\n","         1.55000000e-01,  2.20000000e+01],\n","       [ 1.00000000e+00,  6.51818785e-01,  1.15190088e+00,\n","        -5.07171799e-01,  1.23400486e+00,  1.73275885e+00,\n","         1.07600000e+00,  2.20000000e+01],\n","       [ 1.00000000e+00,  1.08504784e+00,  1.16731829e-01,\n","        -7.05154145e-01,  8.49482376e-02, -1.05752216e+00,\n","         1.23000000e-01,  2.40000000e+01],\n","       [ 2.00000000e+00, -4.62198775e-01,  2.89260005e-01,\n","         1.85766415e-01, -4.65304230e-01,  2.71183086e-01,\n","         4.04000000e-01,  2.30000000e+01],\n","       [ 5.00000000e+00,  1.36355223e+00,  1.16731829e-01,\n","        -9.03136492e-01,  1.41591874e-01, -1.02430452e+00,\n","         5.87000000e-01,  5.10000000e+01],\n","       [ 9.00000000e+00,  9.92213039e-01,  6.34316355e-01,\n","         1.85766415e-01, -4.65304230e-01, -1.77254933e-01,\n","         1.64000000e-01,  4.50000000e+01],\n","       [ 1.10000000e+01,  6.51818785e-01,  2.01454176e+00,\n","         4.82739935e-01, -9.30746195e-02,  7.69447551e-01,\n","         2.54000000e-01,  5.10000000e+01],\n","       [ 3.00000000e+00, -3.38419046e-01,  1.66948541e+00,\n","        -1.59607471e+00, -6.43327087e-01, -5.92475321e-01,\n","         4.95000000e-01,  2.90000000e+01],\n","       [ 1.00000000e+00, -8.33537961e-01,  9.79372706e-01,\n","        -3.09189452e-01,  1.82051614e-01,  5.03706503e-01,\n","         2.33000000e-01,  4.30000000e+01]])"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["model = Perceptron(random_state=11, shuffle=True, penalty='l1')\n","model.fit(X_train_std, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QOOx_a_3dUyu","executionInfo":{"status":"ok","timestamp":1665165704262,"user_tz":-300,"elapsed":65,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"bd6b5af8-61da-4b37-e47d-942ee750f782"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Perceptron(penalty='l1', random_state=11)"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["print('accuracy: ', model.score(X_test_std, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bxq5czGNf222","executionInfo":{"status":"ok","timestamp":1665165704263,"user_tz":-300,"elapsed":42,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"eb1ba171-31af-486c-ab3c-b6243a3247bd"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy:  0.7549019607843137\n"]}]},{"cell_type":"markdown","source":["**Confusion Matrix**"],"metadata":{"id":"tTNKGkncddD_"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","confusion_matrix(y_test, model.predict(X_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I2virFjldXuS","executionInfo":{"status":"ok","timestamp":1665165704264,"user_tz":-300,"elapsed":41,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"6e161517-c3d2-4a41-8edb-6fa0da381077"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[61,  7],\n","       [18, 16]])"]},"metadata":{},"execution_count":62}]},{"cell_type":"markdown","source":["**Adaline**"],"metadata":{"id":"91T5VsK2dq7q"}},{"cell_type":"code","source":["class Adaline(object):\n","\n","    def __init__(self, eta=0.01, n_iter=50, random_state=1):\n","        self.w_ = None\n","        self.cost_ = None\n","        self.eta = eta\n","        self.n_iter = n_iter\n","        self.random_state = random_state\n","\n","    def fit(self, X, y):\n","\n","        rgen = np.random.RandomState(self.random_state)\n","        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=1 + X.shape[1])\n","        self.cost_ = []\n","\n","        for i in range(self.n_iter):\n","            net_input = self.net_input(X)\n","            output = self.activation(net_input)\n","            errors = (y - output)\n","            self.w_[1:] += self.eta * X.T.dot(errors)\n","            self.w_[0] += self.eta * errors.sum()\n","            cost = (errors ** 2).sum() / 2.0\n","            self.cost_.append(cost)\n","        return self\n","\n","\n","    def net_input(self, X):       \n","        return np.dot(X, self.w_[1:]) + self.w_[0]\n","\n","    def activation(self, X):\n","        return X\n","\n","    def predict(self, X):\n","        return np.where(self.activation(self.net_input(X)) >= 0.0, 1, -1)"],"metadata":{"id":"LUy88UPzdX0t","executionInfo":{"status":"ok","timestamp":1665165704265,"user_tz":-300,"elapsed":39,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","\n","ada_gd = Adaline(n_iter=15, eta=0.1)\n","ada_gd.fit(X_train, y_train)\n","predictions = ada_gd.predict(X_test)"],"metadata":{"id":"hC3Qr7e2d8JO","executionInfo":{"status":"ok","timestamp":1665165704266,"user_tz":-300,"elapsed":39,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["accuracy_score(y_test, predictions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"79q3_YlTln7_","executionInfo":{"status":"ok","timestamp":1665165704269,"user_tz":-300,"elapsed":42,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"7b180899-7526-4b1f-cbaf-07e319534a5b"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3333333333333333"]},"metadata":{},"execution_count":65}]},{"cell_type":"markdown","source":["**Confusion Matrix**"],"metadata":{"id":"JO52jVMbeCkY"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","confusion_matrix(y_test, predictions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pyG3VdzWd8Nd","executionInfo":{"status":"ok","timestamp":1665165704272,"user_tz":-300,"elapsed":40,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"843e8062-f7b6-41bb-bfdd-0af87a21702f"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0, 68],\n","       [ 0, 34]])"]},"metadata":{},"execution_count":66}]},{"cell_type":"markdown","source":["**Logistic** **Regression** "],"metadata":{"id":"JNTmSFFyeJ5r"}},{"cell_type":"code","source":["model = LogisticRegression()\n","model.fit(X_train_std, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qLxfEMbSd8Sl","executionInfo":{"status":"ok","timestamp":1665165704272,"user_tz":-300,"elapsed":32,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"736d6fa5-1b1c-4860-8a41-8d95e17b9303"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["score = model.score(X_test_std, y_test)\n","print(score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vHOhrYHHlxKP","executionInfo":{"status":"ok","timestamp":1665165704273,"user_tz":-300,"elapsed":30,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"b0c37532-1019-4601-f810-d636a9f6bc96"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["0.803921568627451\n"]}]},{"cell_type":"markdown","source":["**Confusion Matrix**"],"metadata":{"id":"e03H1u7reTES"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","confusion_matrix(y_test, model.predict(X_test_std))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0M7_AQH3d8WG","executionInfo":{"status":"ok","timestamp":1665165704274,"user_tz":-300,"elapsed":28,"user":{"displayName":"Amjad Ali","userId":"11132892086156879050"}},"outputId":"c3dd8f1f-8766-402d-930d-92db062d5114"},"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[60,  8],\n","       [12, 22]])"]},"metadata":{},"execution_count":69}]},{"cell_type":"markdown","source":["# Questions Answers"],"metadata":{"id":"ZInuJiAmgpCG"}},{"cell_type":"markdown","source":["**Which algorithm gives best accuracy? (10 points)**\n","\n","\n","---\n","\n","\n","Answer: Logistic Regression gives best accuracy of 0.80\n"],"metadata":{"id":"xa3K2zmLeiTO"}},{"cell_type":"markdown","source":["**Display confusion matrix for all three algorithms  (10 points)**\n","\n","---\n","Confusion Matrix of Preceptron\n","```\n","[61,  7],\n","[18, 16]\n","```\n","\n","Confusion Matrix of Adaline\n","```\n","[ 0, 68],\n","[ 0, 34]\n","```\n","Confusion Matrix of Logistic Regression\n","```\n","[60,  8],\n","[12, 22]\n","```"],"metadata":{"id":"kMgSHssQfI0N"}}]}