{"cells":[{"cell_type":"markdown","source":["# Assignment #3 (Playing with text)"],"metadata":{"id":"dhBG57micjau"}},{"cell_type":"markdown","source":["#### Name : Amjad Ali \n","#### CMS: 023-19-0131\n","#### Machine Learning Assignment 02"],"metadata":{"id":"lAh5UEHQcvqx"}},{"cell_type":"markdown","metadata":{"id":"Np8tnEIBWYfC"},"source":["Import all required modules"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gVdVZN60WXZT"},"outputs":[],"source":["from google.colab import drive\n","import keras\n","import numpy as np\n","import pandas as pd\n","import nltk\n","from nltk.corpus import stopwords\n","import pickle\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import recall_score\n","from sklearn.metrics import f1_score\n","import re\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras.layers import TextVectorization\n","from keras.models import Sequential\n","from keras.layers import Embedding, SimpleRNN\n","from keras.layers import Dense\n","import matplotlib.pyplot as plt\n","from keras.layers import LSTM\n","from tensorflow.keras.layers import Bidirectional"]},{"cell_type":"markdown","source":["#Load Dataset (Sentiment140 dataset)"],"metadata":{"id":"BRc_-yazdAtP"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30312,"status":"ok","timestamp":1668109733310,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"Z1ElT1BocGVU","outputId":"dc7ea879-97f4-40ad-e467-1ca41e838ce0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":8468,"status":"ok","timestamp":1668028277687,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"weNLBOLMR1MF","outputId":"3e8a0243-bfea-4090-e194-20a84d89e8f5"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-78f9e1e9-ae8f-4020-acb7-843d34826522\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1467810369</td>\n","      <td>Mon Apr 06 22:19:45 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>_TheSpecialOne_</td>\n","      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1467810672</td>\n","      <td>Mon Apr 06 22:19:49 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>scotthamilton</td>\n","      <td>is upset that he can't update his Facebook by ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>1467810917</td>\n","      <td>Mon Apr 06 22:19:53 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>mattycus</td>\n","      <td>@Kenichan I dived many times for the ball. Man...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1467811184</td>\n","      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>ElleCTF</td>\n","      <td>my whole body feels itchy and like its on fire</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>1467811193</td>\n","      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>Karoli</td>\n","      <td>@nationwideclass no, it's not behaving at all....</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78f9e1e9-ae8f-4020-acb7-843d34826522')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-78f9e1e9-ae8f-4020-acb7-843d34826522 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-78f9e1e9-ae8f-4020-acb7-843d34826522');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   0           1                             2         3                4  \\\n","0  0  1467810369  Mon Apr 06 22:19:45 PDT 2009  NO_QUERY  _TheSpecialOne_   \n","1  0  1467810672  Mon Apr 06 22:19:49 PDT 2009  NO_QUERY    scotthamilton   \n","2  0  1467810917  Mon Apr 06 22:19:53 PDT 2009  NO_QUERY         mattycus   \n","3  0  1467811184  Mon Apr 06 22:19:57 PDT 2009  NO_QUERY          ElleCTF   \n","4  0  1467811193  Mon Apr 06 22:19:57 PDT 2009  NO_QUERY           Karoli   \n","\n","                                                   5  \n","0  @switchfoot http://twitpic.com/2y1zl - Awww, t...  \n","1  is upset that he can't update his Facebook by ...  \n","2  @Kenichan I dived many times for the ball. Man...  \n","3    my whole body feels itchy and like its on fire   \n","4  @nationwideclass no, it's not behaving at all....  "]},"execution_count":50,"metadata":{},"output_type":"execute_result"}],"source":["data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/training.1600000.processed.noemoticon.csv', encoding=\"latin_1\", header=None)\n","data.head(5)"]},{"cell_type":"markdown","source":["#### Removing Extra Features"],"metadata":{"id":"8ZjMCxeldKZZ"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":371,"status":"ok","timestamp":1668028280797,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"Mv_c2gMPR1MJ","outputId":"d98feac8-dd13-4d58-9faf-bdd6e13022e8"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-a922f771-7d61-4844-bae6-c56e88d3700f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>is upset that he can't update his Facebook by ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>@Kenichan I dived many times for the ball. Man...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>my whole body feels itchy and like its on fire</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>@nationwideclass no, it's not behaving at all....</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1599995</th>\n","      <td>4</td>\n","      <td>Just woke up. Having no school is the best fee...</td>\n","    </tr>\n","    <tr>\n","      <th>1599996</th>\n","      <td>4</td>\n","      <td>TheWDB.com - Very cool to hear old Walt interv...</td>\n","    </tr>\n","    <tr>\n","      <th>1599997</th>\n","      <td>4</td>\n","      <td>Are you ready for your MoJo Makeover? Ask me f...</td>\n","    </tr>\n","    <tr>\n","      <th>1599998</th>\n","      <td>4</td>\n","      <td>Happy 38th Birthday to my boo of alll time!!! ...</td>\n","    </tr>\n","    <tr>\n","      <th>1599999</th>\n","      <td>4</td>\n","      <td>happy #charitytuesday @theNSPCC @SparksCharity...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1600000 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a922f771-7d61-4844-bae6-c56e88d3700f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a922f771-7d61-4844-bae6-c56e88d3700f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a922f771-7d61-4844-bae6-c56e88d3700f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["         0                                                  5\n","0        0  @switchfoot http://twitpic.com/2y1zl - Awww, t...\n","1        0  is upset that he can't update his Facebook by ...\n","2        0  @Kenichan I dived many times for the ball. Man...\n","3        0    my whole body feels itchy and like its on fire \n","4        0  @nationwideclass no, it's not behaving at all....\n","...     ..                                                ...\n","1599995  4  Just woke up. Having no school is the best fee...\n","1599996  4  TheWDB.com - Very cool to hear old Walt interv...\n","1599997  4  Are you ready for your MoJo Makeover? Ask me f...\n","1599998  4  Happy 38th Birthday to my boo of alll time!!! ...\n","1599999  4  happy #charitytuesday @theNSPCC @SparksCharity...\n","\n","[1600000 rows x 2 columns]"]},"execution_count":51,"metadata":{},"output_type":"execute_result"}],"source":["df = df.iloc[:,[0,5]]\n","df"]},{"cell_type":"markdown","source":["####Now give names to columns"],"metadata":{"id":"vwlJ4HjmdVJq"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":1437,"status":"ok","timestamp":1668028284697,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"c78yKSo_R1ML","outputId":"b65a739c-7d64-467a-d6e8-584750fd8aa7"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-7ec33359-fe78-453f-89c9-97c25f162606\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Target</th>\n","      <th>Tweet</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>is upset that he can't update his Facebook by ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>@Kenichan I dived many times for the ball. Man...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>my whole body feels itchy and like its on fire</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>@nationwideclass no, it's not behaving at all....</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1599995</th>\n","      <td>4</td>\n","      <td>Just woke up. Having no school is the best fee...</td>\n","    </tr>\n","    <tr>\n","      <th>1599996</th>\n","      <td>4</td>\n","      <td>TheWDB.com - Very cool to hear old Walt interv...</td>\n","    </tr>\n","    <tr>\n","      <th>1599997</th>\n","      <td>4</td>\n","      <td>Are you ready for your MoJo Makeover? Ask me f...</td>\n","    </tr>\n","    <tr>\n","      <th>1599998</th>\n","      <td>4</td>\n","      <td>Happy 38th Birthday to my boo of alll time!!! ...</td>\n","    </tr>\n","    <tr>\n","      <th>1599999</th>\n","      <td>4</td>\n","      <td>happy #charitytuesday @theNSPCC @SparksCharity...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1600000 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ec33359-fe78-453f-89c9-97c25f162606')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7ec33359-fe78-453f-89c9-97c25f162606 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7ec33359-fe78-453f-89c9-97c25f162606');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["         Target                                              Tweet\n","0             0  @switchfoot http://twitpic.com/2y1zl - Awww, t...\n","1             0  is upset that he can't update his Facebook by ...\n","2             0  @Kenichan I dived many times for the ball. Man...\n","3             0    my whole body feels itchy and like its on fire \n","4             0  @nationwideclass no, it's not behaving at all....\n","...         ...                                                ...\n","1599995       4  Just woke up. Having no school is the best fee...\n","1599996       4  TheWDB.com - Very cool to hear old Walt interv...\n","1599997       4  Are you ready for your MoJo Makeover? Ask me f...\n","1599998       4  Happy 38th Birthday to my boo of alll time!!! ...\n","1599999       4  happy #charitytuesday @theNSPCC @SparksCharity...\n","\n","[1600000 rows x 2 columns]"]},"execution_count":52,"metadata":{},"output_type":"execute_result"}],"source":["df.columns=[\"Target\",\"Tweet\"]\n","df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1668028286928,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"-SNRgPYJR1MM","outputId":"79d6940b-65a9-4ebd-ab92-bf7150bf02a0"},"outputs":[{"data":{"text/plain":["0    800000\n","4    800000\n","Name: Target, dtype: int64"]},"execution_count":53,"metadata":{},"output_type":"execute_result"}],"source":["df[\"Target\"].value_counts()"]},{"cell_type":"markdown","source":["####Change postive value as 1."],"metadata":{"id":"-DrGufa7ddb3"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"aakg9kFxR1MN"},"outputs":[],"source":["df['Target'] = df['Target'].replace(4,1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1668028289135,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"7nCPTvcRR1MO","outputId":"629593dc-7fd9-4331-877e-e0ee8383d162"},"outputs":[{"data":{"text/plain":["0    800000\n","1    800000\n","Name: Target, dtype: int64"]},"execution_count":55,"metadata":{},"output_type":"execute_result"}],"source":["df[\"Target\"].value_counts()"]},{"cell_type":"markdown","source":["#### Downloading Stopwrod"],"metadata":{"id":"BDklzxY5dnii"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1462,"status":"ok","timestamp":1668028334182,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"9NsZpbOBPFWd","outputId":"96aeac2b-beae-4c18-b7b5-739d93324819"},"outputs":[{"name":"stderr","output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]},{"data":{"text/plain":["True"]},"execution_count":58,"metadata":{},"output_type":"execute_result"}],"source":["nltk.download('stopwords')\n","stop_words = set(stopwords.words(\"english\"))"]},{"cell_type":"markdown","source":["#### Removing Punctuation and stop words"],"metadata":{"id":"oszKNwjVdsxt"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"DrXl-OhZr-mI"},"outputs":[],"source":["import re\n","data['Tweet']=data['Tweet'].apply(lambda x: re.sub('[^A-Z a-z 0-9-]+','',x))"]},{"cell_type":"code","source":["import spacy\n","data['Tweet']=data['Tweet'].apply(lambda x: ' '.join([t for t in x.split() if t.lower() not in stop_words]))"],"metadata":{"id":"PnKm3-9janAe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train-Test Split"],"metadata":{"id":"C0ndWJesd4KF"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"r8fkHBTSwb3o"},"outputs":[],"source":["X = data['Tweet']\n","y = data['Target'].values\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=33, stratify=Y)"]},{"cell_type":"markdown","source":["##TextVectorization max_tokens of 10000"],"metadata":{"id":"6OqWhbUWeDxo"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q4h0diqkkaTo"},"outputs":[],"source":["text_vectorization = TextVectorization(\n","    output_mode=\"int\",\n","   max_tokens=10000\n",")\n","text_vectorization.adapt(X)\n","\n","X_train = text_vectorization(X_train)\n","X_test = text_vectorization(X_test)"]},{"cell_type":"markdown","source":["## Storing files for future use"],"metadata":{"id":"r_SgHLlyeM6q"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"UjWLtcsiP6GP"},"outputs":[],"source":["pickle.dump(text_vectorization.get_vocabulary(),  open(\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/vocab.pkl\", 'wb'))\n","pickle.dump(X_train, open(\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/X-train.pkl\", 'wb'))\n","pickle.dump(y_train, open(\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/Y-train.pkl\", 'wb'))\n","pickle.dump(X_test, open(\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/X-test.pkl\", 'wb'))\n","pickle.dump(y_test, open(\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/Y-test.pkl\", 'wb'))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DjrFLhJzmIrE"},"outputs":[],"source":["vocabulary = pickle.load(open(f\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/vocab.pkl\", 'rb'))\n","X_train = pickle.load(open(f\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/X-train.pkl\", 'rb'))\n","Y_train = pickle.load(open(f\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/Y-train.pkl\", 'rb'))\n","X_test = pickle.load(open(f\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/X-test.pkl\", 'rb'))\n","Y_test = pickle.load(open(f\"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/Y-test.pkl\", 'rb'))"]},{"cell_type":"markdown","source":["# Experiment 1"],"metadata":{"id":"gg3vh-K4eXe9"}},{"cell_type":"markdown","metadata":{"id":"Wnchg_QKxjwB"},"source":["Experiment 1: RNN with an embedding layer and two hidden layers (64, 32) to learn word embedding from the data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":584977,"status":"ok","timestamp":1668020961625,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"OBv7j_Zuxwg3","outputId":"7249d36c-a8e2-4866-b467-764a2a7c17e6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_1 (Embedding)     (None, None, 140)         1400000   \n","                                                                 \n"," simple_rnn_1 (SimpleRNN)    (None, 32)                5536      \n","                                                                 \n"," dense_3 (Dense)             (None, 64)                2112      \n","                                                                 \n"," dense_4 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dense_5 (Dense)             (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,409,761\n","Trainable params: 1,409,761\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 154s 44ms/step - loss: 0.4869 - acc: 0.7679 - val_loss: 0.4719 - val_acc: 0.7785\n","Epoch 2/5\n","3500/3500 [==============================] - 154s 44ms/step - loss: 0.4577 - acc: 0.7859 - val_loss: 0.4691 - val_acc: 0.7792\n","Epoch 3/5\n","3500/3500 [==============================] - 157s 45ms/step - loss: 0.4488 - acc: 0.7912 - val_loss: 0.4625 - val_acc: 0.7814\n","Epoch 4/5\n","3500/3500 [==============================] - 159s 45ms/step - loss: 0.4427 - acc: 0.7950 - val_loss: 0.4605 - val_acc: 0.7833\n","Epoch 5/5\n","3500/3500 [==============================] - 154s 44ms/step - loss: 0.4377 - acc: 0.7982 - val_loss: 0.4605 - val_acc: 0.7818\n"]}],"source":["max_features = 10000 \n","maxlen = 140 \n","\n","model = Sequential()\n","model.add(Embedding(max_features, maxlen))\n","\n","model.add(SimpleRNN(32))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rFMuw3KP1ry3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668096350555,"user_tz":-300,"elapsed":1695,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"310acca0-1d66-413b-a1f2-3d1c52474561"},"outputs":[{"output_type":"stream","name":"stdout","text":["Experiment#1--> Accuracy:  0.7783520833333334  \tPrecision:  0.7793052123705478 \tRecall:  0.7766458333333334 \tF1-Score:  0.7779732501914727\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = []\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","print('Experiment#1--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","performanceArray.append([accuracy,precision,recall,f1])\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["# Experiment 2"],"metadata":{"id":"uRf_eQtten7Z"}},{"cell_type":"markdown","metadata":{"id":"UdGIapoW5ZEM"},"source":["Experiment 2: RNN with an embedding layer and three hidden layers (128,64, 32) to learn word embedding from the data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":804962,"status":"ok","timestamp":1668026127192,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"UiPm-P7x57K_","outputId":"8f9db292-41ce-4e29-a6a5-557e8eb196f5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_4 (Embedding)     (None, None, 140)         1400000   \n","                                                                 \n"," simple_rnn_4 (SimpleRNN)    (None, 32)                5536      \n","                                                                 \n"," dense_14 (Dense)            (None, 128)               4224      \n","                                                                 \n"," dense_15 (Dense)            (None, 64)                8256      \n","                                                                 \n"," dense_16 (Dense)            (None, 32)                2080      \n","                                                                 \n"," dense_17 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,420,129\n","Trainable params: 1,420,129\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 167s 47ms/step - loss: 0.4937 - acc: 0.7629 - val_loss: 0.4750 - val_acc: 0.7759\n","Epoch 2/5\n","3500/3500 [==============================] - 152s 44ms/step - loss: 0.4600 - acc: 0.7842 - val_loss: 0.4799 - val_acc: 0.7659\n","Epoch 3/5\n","3500/3500 [==============================] - 154s 44ms/step - loss: 0.4506 - acc: 0.7894 - val_loss: 0.4650 - val_acc: 0.7790\n","Epoch 4/5\n","3500/3500 [==============================] - 156s 44ms/step - loss: 0.4437 - acc: 0.7940 - val_loss: 0.4665 - val_acc: 0.7804\n","Epoch 5/5\n","3500/3500 [==============================] - 155s 44ms/step - loss: 0.4383 - acc: 0.7973 - val_loss: 0.4598 - val_acc: 0.7841\n"]}],"source":["model = Sequential()\n","model.add(Embedding(max_features, maxlen))\n","\n","model.add(SimpleRNN(32))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1117,"status":"ok","timestamp":1668096420068,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"64DnBCpS6ckY","outputId":"3486ee1d-83a7-4783-e66b-16f3b07f1058"},"outputs":[{"output_type":"stream","name":"stdout","text":["Experiment#2--> Accuracy:  0.7620729166666667  \tPrecision:  0.8173708138437706 \tRecall:  0.6749541666666666 \tF1-Score:  0.7393668855249975\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#2--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["# Experiment 3"],"metadata":{"id":"LkJF0P1ce5V5"}},{"cell_type":"markdown","metadata":{"id":"JlfxxtWVILB6"},"source":["Experiment 3: RNN with an embedding layer and two hidden layers (64, 32) by Using Glove with 100d"]},{"cell_type":"code","source":["path_to_glove_file = \"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/glove.6B.100d.txt\""],"metadata":{"id":"48igFROwjlik"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["embeddings_index = {}\n","with open(path_to_glove_file) as f:\n","    for line in f:\n","        word, coefs = line.split(maxsplit=1)\n","        coefs = np.fromstring(coefs, \"f\", sep=\" \")\n","        embeddings_index[word] = coefs\n","\n","embedding_dim = 100\n","\n","vocabulary = text_vectorization.get_vocabulary()\n","word_index = dict(zip(vocabulary, range(len(vocabulary))))"],"metadata":{"id":"n-YvWoDsjvln"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["embedding_matrix = np.zeros((10000, embedding_dim))\n","for word, i in word_index.items():\n","    if i <10000:\n","        embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector\n","\n","model = Sequential()\n","model.add(Embedding(max_features, 100,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))"],"metadata":{"id":"m6nEdpvFjs5l"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":455123,"status":"ok","timestamp":1668030228186,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"hcHzwPqhIhzU","outputId":"8387d6e5-d10c-420d-f2b2-37fe922ff51d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_5 (Embedding)     (None, None, 100)         1000000   \n","                                                                 \n"," simple_rnn_5 (SimpleRNN)    (None, 32)                4256      \n","                                                                 \n"," dense_18 (Dense)            (None, 64)                2112      \n","                                                                 \n"," dense_19 (Dense)            (None, 32)                2080      \n","                                                                 \n"," dense_20 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,008,481\n","Trainable params: 8,481\n","Non-trainable params: 1,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 86s 24ms/step - loss: 0.5764 - acc: 0.6979 - val_loss: 0.5659 - val_acc: 0.7119\n","Epoch 2/5\n","3500/3500 [==============================] - 81s 23ms/step - loss: 0.5449 - acc: 0.7234 - val_loss: 0.5291 - val_acc: 0.7324\n","Epoch 3/5\n","3500/3500 [==============================] - 83s 24ms/step - loss: 0.5326 - acc: 0.7335 - val_loss: 0.5282 - val_acc: 0.7318\n","Epoch 4/5\n","3500/3500 [==============================] - 81s 23ms/step - loss: 0.5246 - acc: 0.7391 - val_loss: 0.5189 - val_acc: 0.7417\n","Epoch 5/5\n","3500/3500 [==============================] - 90s 26ms/step - loss: 0.5187 - acc: 0.7434 - val_loss: 0.5328 - val_acc: 0.7410\n"]}],"source":["model.add(SimpleRNN(32))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":100357,"status":"ok","timestamp":1668030328510,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"mlQcHfWrV61j","outputId":"d829dcd6-3239-4368-ae9c-de4d57a38145"},"outputs":[{"name":"stdout","output_type":"stream","text":["15000/15000 [==============================] - 94s 6ms/step\n","Experiment#3--> Accuracy:  0.7294229166666667  \tPrecision:  0.7992846931953451 \tRecall:  0.6127083333333333 \tF1-Score:  0.6936697037811014\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#3--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["#Experiment 4"],"metadata":{"id":"FOJrU8eRfIkF"}},{"cell_type":"markdown","metadata":{"id":"qW7V1g29IeoX"},"source":["Experiment 4: RNN with an embedding layer and three hidden layers (128,64, 32) by Using Glove with 100d"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":455676,"status":"ok","timestamp":1668030909032,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"zlYaaH1eW9n-","outputId":"ad1b29f5-5027-46dc-8df6-759b179fb34b"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_7\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_7 (Embedding)     (None, None, 100)         1000000   \n","                                                                 \n"," simple_rnn_7 (SimpleRNN)    (None, 32)                4256      \n","                                                                 \n"," dense_25 (Dense)            (None, 128)               4224      \n","                                                                 \n"," dense_26 (Dense)            (None, 64)                8256      \n","                                                                 \n"," dense_27 (Dense)            (None, 32)                2080      \n","                                                                 \n"," dense_28 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,018,849\n","Trainable params: 18,849\n","Non-trainable params: 1,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 98s 28ms/step - loss: 0.5770 - acc: 0.6971 - val_loss: 0.5523 - val_acc: 0.7162\n","Epoch 2/5\n","3500/3500 [==============================] - 91s 26ms/step - loss: 0.5457 - acc: 0.7235 - val_loss: 0.5355 - val_acc: 0.7331\n","Epoch 3/5\n","3500/3500 [==============================] - 88s 25ms/step - loss: 0.5302 - acc: 0.7353 - val_loss: 0.5323 - val_acc: 0.7290\n","Epoch 4/5\n","3500/3500 [==============================] - 90s 26ms/step - loss: 0.5217 - acc: 0.7421 - val_loss: 0.5115 - val_acc: 0.7470\n","Epoch 5/5\n","3500/3500 [==============================] - 87s 25ms/step - loss: 0.5162 - acc: 0.7459 - val_loss: 0.5348 - val_acc: 0.7347\n"]}],"source":["model = Sequential()\n","model.add(Embedding(max_features, 100,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(SimpleRNN(32))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":82148,"status":"ok","timestamp":1668030991159,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"wolMmv9xXTWO","outputId":"dd58934f-d7b2-4cf6-9045-32fd80eac750"},"outputs":[{"name":"stdout","output_type":"stream","text":["15000/15000 [==============================] - 78s 5ms/step\n","Experiment#4--> Accuracy:  0.7328708333333334  \tPrecision:  0.8026491070364875 \tRecall:  0.6175916666666666 \tF1-Score:  0.6980638902101887\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#4--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["# Experiment 5"],"metadata":{"id":"6Erk3SrWfXS3"}},{"cell_type":"markdown","metadata":{"id":"ZqyqqWsqzN0N"},"source":["Experiment 5: RNN with an embedding layer and two hidden layers (64, 32) by Using Glove-twitter with 100d"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SDq2WWoaLV-5"},"outputs":[],"source":["vocabulary = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/vocab.pkl', 'rb'))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MjekFWfcMdY6"},"outputs":[],"source":["path_to_glove_file = \"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/glove.twitter.27B.100d.txt\"\n","embeddings_index = {}\n","with open(path_to_glove_file) as f:\n","    for line in f:\n","        word, coefs = line.split(maxsplit=1)\n","        coefs = np.fromstring(coefs, \"f\", sep=\" \")\n","        embeddings_index[word] = coefs\n","\n","embedding_dim = 100\n","\n","word_index = dict(zip(vocabulary, range(len(vocabulary))))\n","\n","embedding_matrix = np.zeros((10000, embedding_dim))\n","for word, i in word_index.items():\n","    if i <10000:\n","        embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":384606,"status":"ok","timestamp":1668062627822,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"2NaHMsNazkEf","outputId":"d2a702bb-830b-45e7-ffa7-9d85ed9603b6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_1 (Embedding)     (None, None, 100)         1000000   \n","                                                                 \n"," simple_rnn_1 (SimpleRNN)    (None, 32)                4256      \n","                                                                 \n"," dense_3 (Dense)             (None, 64)                2112      \n","                                                                 \n"," dense_4 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dense_5 (Dense)             (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,008,481\n","Trainable params: 8,481\n","Non-trainable params: 1,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 76s 21ms/step - loss: 0.5332 - acc: 0.7341 - val_loss: 0.5240 - val_acc: 0.7456\n","Epoch 2/5\n","3500/3500 [==============================] - 68s 20ms/step - loss: 0.5062 - acc: 0.7529 - val_loss: 0.4942 - val_acc: 0.7605\n","Epoch 3/5\n","3500/3500 [==============================] - 70s 20ms/step - loss: 0.4946 - acc: 0.7595 - val_loss: 0.4889 - val_acc: 0.7622\n","Epoch 4/5\n","3500/3500 [==============================] - 72s 21ms/step - loss: 0.4891 - acc: 0.7634 - val_loss: 0.4865 - val_acc: 0.7645\n","Epoch 5/5\n","3500/3500 [==============================] - 68s 19ms/step - loss: 0.4851 - acc: 0.7658 - val_loss: 0.4822 - val_acc: 0.7665\n"]}],"source":["model = Sequential()\n","model.add(Embedding(10000, 100,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(SimpleRNN(32))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":51156,"status":"ok","timestamp":1668062678941,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"of6V84X_Ne0b","outputId":"dee157e3-a529-4e00-d688-500b5393351c"},"outputs":[{"name":"stdout","output_type":"stream","text":["15000/15000 [==============================] - 48s 3ms/step\n","Experiment#5--> Accuracy:  0.7671270833333333  \tPrecision:  0.7811457113663374 \tRecall:  0.7421958333333334 \tF1-Score:  0.7611728232838283\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#5--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["#Experiment 6"],"metadata":{"id":"3g9i4PeRfjy0"}},{"cell_type":"markdown","metadata":{"id":"dys04DCzzdds"},"source":["Experiment 6: RNN with an embedding layer and three hidden layers (128, 64, 32) by Using Glove-twitter with 100d"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":384611,"status":"ok","timestamp":1668063063478,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"uGfoXdoMiYMP","outputId":"36b99aae-85fc-4078-f0e0-4f3a5466082d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_2 (Embedding)     (None, None, 100)         1000000   \n","                                                                 \n"," simple_rnn_2 (SimpleRNN)    (None, 32)                4256      \n","                                                                 \n"," dense_6 (Dense)             (None, 128)               4224      \n","                                                                 \n"," dense_7 (Dense)             (None, 64)                8256      \n","                                                                 \n"," dense_8 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dense_9 (Dense)             (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,018,849\n","Trainable params: 18,849\n","Non-trainable params: 1,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 76s 21ms/step - loss: 0.5380 - acc: 0.7316 - val_loss: 0.5212 - val_acc: 0.7415\n","Epoch 2/5\n","3500/3500 [==============================] - 73s 21ms/step - loss: 0.5139 - acc: 0.7478 - val_loss: 0.5138 - val_acc: 0.7518\n","Epoch 3/5\n","3500/3500 [==============================] - 72s 21ms/step - loss: 0.5026 - acc: 0.7550 - val_loss: 0.4946 - val_acc: 0.7587\n","Epoch 4/5\n","3500/3500 [==============================] - 73s 21ms/step - loss: 0.4956 - acc: 0.7597 - val_loss: 0.4984 - val_acc: 0.7601\n","Epoch 5/5\n","3500/3500 [==============================] - 75s 21ms/step - loss: 0.4907 - acc: 0.7632 - val_loss: 0.4922 - val_acc: 0.7611\n"]}],"source":["\n","model = Sequential()\n","model.add(Embedding(10000, 100,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(SimpleRNN(32))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":83352,"status":"ok","timestamp":1668063146814,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"id":"LKj4JxnvODpH","outputId":"b5093118-0e01-4211-c355-b8f92cedbe42"},"outputs":[{"name":"stdout","output_type":"stream","text":["15000/15000 [==============================] - 53s 3ms/step\n","Experiment#6--> Accuracy:  0.7603291666666666  \tPrecision:  0.7944678003167182 \tRecall:  0.7023625 \tF1-Score:  0.7455813665475389\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#6--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["#Experiment 7"],"metadata":{"id":"CbD0qbeFfwEd"}},{"cell_type":"markdown","metadata":{"id":"-BKpxEKHL4V4"},"source":["Experiment 7: RNN with an embedding layer and two hidden layers (64, 32) by Using fastex with 300d"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MzKAm-kQMBPm"},"outputs":[],"source":["path_to_glove_file = \"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/FastText(wiki-news-300d-1M).vec\"\n","embeddings_index = {}\n","with open(path_to_glove_file) as f:\n","    for line in f:\n","        word, coefs = line.split(maxsplit=1)\n","        coefs = np.fromstring(coefs, \"f\", sep=\" \")\n","        embeddings_index[word] = coefs\n","\n","embedding_dim = 300\n","\n","word_index = dict(zip(vocabulary, range(len(vocabulary))))\n","\n","embedding_matrix = np.zeros((10000, embedding_dim))\n","for word, i in word_index.items():\n","    if i <10000:\n","        embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YUjSfR2WNNe4","executionInfo":{"status":"ok","timestamp":1668080469064,"user_tz":-300,"elapsed":573687,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"f6f16499-0ea2-48c1-d6f7-a70324a2ae17"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_2 (Embedding)     (None, None, 300)         3000000   \n","                                                                 \n"," simple_rnn_2 (SimpleRNN)    (None, 32)                10656     \n","                                                                 \n"," dense_6 (Dense)             (None, 64)                2112      \n","                                                                 \n"," dense_7 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dense_8 (Dense)             (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 3,014,881\n","Trainable params: 14,881\n","Non-trainable params: 3,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 190s 54ms/step - loss: 0.5299 - acc: 0.7373 - val_loss: 0.5092 - val_acc: 0.7508\n","Epoch 2/5\n","3500/3500 [==============================] - 168s 48ms/step - loss: 0.5092 - acc: 0.7516 - val_loss: 0.5211 - val_acc: 0.7537\n","Epoch 3/5\n","3500/3500 [==============================] - 172s 49ms/step - loss: 0.4999 - acc: 0.7578 - val_loss: 0.4953 - val_acc: 0.7615\n","Epoch 4/5\n","3500/3500 [==============================] - 171s 49ms/step - loss: 0.4931 - acc: 0.7626 - val_loss: 0.4951 - val_acc: 0.7608\n","Epoch 5/5\n","3500/3500 [==============================] - 165s 47ms/step - loss: 0.4881 - acc: 0.7661 - val_loss: 0.4939 - val_acc: 0.7567\n"]}],"source":["\n","model = Sequential()\n","model.add(Embedding(10000, 300,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(SimpleRNN(32))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#7--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dzV470xYULQA","executionInfo":{"status":"ok","timestamp":1668080618859,"user_tz":-300,"elapsed":143216,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"24c66ba5-44f6-434b-a009-6a98469bf968"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15000/15000 [==============================] - 115s 8ms/step\n","Experiment#7--> Accuracy:  0.75035625  \tPrecision:  0.8159684060516504 \tRecall:  0.6465291666666667 \tF1-Score:  0.7214335031139358\n"]}]},{"cell_type":"markdown","source":["#Experiment 8"],"metadata":{"id":"Y9tDgdtHf4Nz"}},{"cell_type":"markdown","source":["Experiment 8: RNN with an embedding layer and three hidden layers (128,64, 32) by Using fastex with 300d"],"metadata":{"id":"2luT1z_9VqJM"}},{"cell_type":"code","source":["model = Sequential()\n","model.add(Embedding(10000, 300,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(SimpleRNN(32))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gbDNAjZQVz6x","executionInfo":{"status":"ok","timestamp":1668081489444,"user_tz":-300,"elapsed":864855,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"96eca5a0-ca87-47a3-edb2-662ba5e75001"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_3 (Embedding)     (None, None, 300)         3000000   \n","                                                                 \n"," simple_rnn_3 (SimpleRNN)    (None, 32)                10656     \n","                                                                 \n"," dense_9 (Dense)             (None, 128)               4224      \n","                                                                 \n"," dense_10 (Dense)            (None, 64)                8256      \n","                                                                 \n"," dense_11 (Dense)            (None, 32)                2080      \n","                                                                 \n"," dense_12 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 3,025,249\n","Trainable params: 25,249\n","Non-trainable params: 3,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 170s 48ms/step - loss: 0.5288 - acc: 0.7377 - val_loss: 0.5065 - val_acc: 0.7514\n","Epoch 2/5\n","3500/3500 [==============================] - 168s 48ms/step - loss: 0.5062 - acc: 0.7527 - val_loss: 0.5019 - val_acc: 0.7557\n","Epoch 3/5\n","3500/3500 [==============================] - 166s 47ms/step - loss: 0.4993 - acc: 0.7575 - val_loss: 0.4976 - val_acc: 0.7590\n","Epoch 4/5\n","3500/3500 [==============================] - 175s 50ms/step - loss: 0.4948 - acc: 0.7610 - val_loss: 0.4924 - val_acc: 0.7610\n","Epoch 5/5\n","3500/3500 [==============================] - 166s 48ms/step - loss: 0.4915 - acc: 0.7631 - val_loss: 0.4916 - val_acc: 0.7622\n"]}]},{"cell_type":"code","source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#8--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl',  'wb'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TpRqG7wBV0fA","executionInfo":{"status":"ok","timestamp":1668081580811,"user_tz":-300,"elapsed":91392,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"be383786-a477-4867-a684-10ca2620953e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15000/15000 [==============================] - 87s 6ms/step\n","Experiment#8--> Accuracy:  0.7622395833333333  \tPrecision:  0.7443159541472087 \tRecall:  0.7989208333333333 \tF1-Score:  0.7706523421093353\n"]}]},{"cell_type":"markdown","source":["# Experiment 9"],"metadata":{"id":"fF0NwByBgBK_"}},{"cell_type":"markdown","metadata":{"id":"H-IkLFmKeWFT"},"source":["Experiment 9: LSTM with an embedding layer and two hidden layers (64, 32) to learn word embedding from the data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"outputId":"335491bb-6a9c-4ada-c36c-6549fc0b8f03","id":"299uLXzfeWFr"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_4 (Embedding)     (None, None, 140)         1400000   \n","                                                                 \n"," bidirectional (Bidirectiona  (None, 64)               44288     \n"," l)                                                              \n","                                                                 \n"," dense_13 (Dense)            (None, 64)                4160      \n","                                                                 \n"," dense_14 (Dense)            (None, 32)                2080      \n","                                                                 \n"," dense_15 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,450,561\n","Trainable params: 1,450,561\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 587s 167ms/step - loss: 0.4666 - acc: 0.7767 - val_loss: 0.4494 - val_acc: 0.7879\n","Epoch 2/5\n","3500/3500 [==============================] - 584s 167ms/step - loss: 0.4399 - acc: 0.7936 - val_loss: 0.4416 - val_acc: 0.7924\n","Epoch 3/5\n","3500/3500 [==============================] - 581s 166ms/step - loss: 0.4296 - acc: 0.7997 - val_loss: 0.4400 - val_acc: 0.7935\n","Epoch 4/5\n"," 932/3500 [======>.......................] - ETA: 6:34 - loss: 0.4205 - acc: 0.8049"]}],"source":["max_features = 10000 \n","maxlen = 140\n","\n","model = Sequential()\n","model.add(Embedding(max_features, maxlen))\n","model.add(Bidirectional(LSTM(32)))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TtaxXQq4eWFt"},"outputs":[],"source":["y_pred = model.predict(X_test)\n","performanceArray = []\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","print('Experiment#9--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","performanceArray.append([accuracy,precision,recall,f1])\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["# Experiment 10"],"metadata":{"id":"_QzrR6sDgRPX"}},{"cell_type":"markdown","source":["Experiment 10: LSTM with an embedding layer and three hidden layers (128, 64, 32) to learn word embedding from the data"],"metadata":{"id":"XNGwkgGtiMjf"}},{"cell_type":"code","source":["max_features = 10000\n","maxlen = 140 \n","\n","model = Sequential()\n","model.add(Embedding(max_features, maxlen))\n","model.add(Bidirectional(LSTM(32)))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"],"metadata":{"id":"LoiF1jzhiNSI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668090079597,"user_tz":-300,"elapsed":216753,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"c68fa472-1d3b-44ba-8062-4ee7fa1e8b25"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, None, 140)         1400000   \n","                                                                 \n"," bidirectional (Bidirectiona  (None, 64)               44288     \n"," l)                                                              \n","                                                                 \n"," dense (Dense)               (None, 128)               8320      \n","                                                                 \n"," dense_1 (Dense)             (None, 64)                8256      \n","                                                                 \n"," dense_2 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dense_3 (Dense)             (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,462,977\n","Trainable params: 1,462,977\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 51s 12ms/step - loss: 0.4659 - acc: 0.7767 - val_loss: 0.4485 - val_acc: 0.7886\n","Epoch 2/5\n","3500/3500 [==============================] - 41s 12ms/step - loss: 0.4388 - acc: 0.7945 - val_loss: 0.4417 - val_acc: 0.7919\n","Epoch 3/5\n","3500/3500 [==============================] - 40s 11ms/step - loss: 0.4289 - acc: 0.8004 - val_loss: 0.4406 - val_acc: 0.7924\n","Epoch 4/5\n","3500/3500 [==============================] - 43s 12ms/step - loss: 0.4223 - acc: 0.8047 - val_loss: 0.4382 - val_acc: 0.7936\n","Epoch 5/5\n","3500/3500 [==============================] - 41s 12ms/step - loss: 0.4179 - acc: 0.8077 - val_loss: 0.4452 - val_acc: 0.7950\n"]}]},{"cell_type":"code","source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","print('Experiment#10--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","performanceArray.append([accuracy,precision,recall,f1])\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"],"metadata":{"id":"hWdzyAs8iPKm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668090163442,"user_tz":-300,"elapsed":83850,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"4811e331-1461-4eea-957b-0414ce42955a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15000/15000 [==============================] - 53s 4ms/step\n","Experiment#10--> Accuracy:  0.7958520833333333  \tPrecision:  0.791838093554897 \tRecall:  0.8027291666666667 \tF1-Score:  0.7972464364857512\n"]}]},{"cell_type":"markdown","source":["# Experiment 11"],"metadata":{"id":"yaumnx26gdOB"}},{"cell_type":"markdown","metadata":{"id":"GXlckc-Q8w0s"},"source":["Experiment 11: LSTM with an embedding layer and two hidden layers (64, 32) by Using Glove with 100d"]},{"cell_type":"code","source":["vocabulary = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/vocab.pkl', 'rb'))"],"metadata":{"id":"UrgmES8B9ZbP"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":203106,"status":"ok","timestamp":1668091194831,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"outputId":"750a7f6f-7006-4023-b617-ab4e7442348d","id":"eIc62GYX8w0s"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_1 (Embedding)     (None, None, 100)         1000000   \n","                                                                 \n"," bidirectional_1 (Bidirectio  (None, 64)               34048     \n"," nal)                                                            \n","                                                                 \n"," dense_4 (Dense)             (None, 64)                4160      \n","                                                                 \n"," dense_5 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dense_6 (Dense)             (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,040,321\n","Trainable params: 40,321\n","Non-trainable params: 1,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 45s 12ms/step - loss: 0.5136 - acc: 0.7450 - val_loss: 0.4868 - val_acc: 0.7640\n","Epoch 2/5\n","3500/3500 [==============================] - 34s 10ms/step - loss: 0.4765 - acc: 0.7703 - val_loss: 0.4717 - val_acc: 0.7742\n","Epoch 3/5\n","3500/3500 [==============================] - 34s 10ms/step - loss: 0.4646 - acc: 0.7780 - val_loss: 0.4663 - val_acc: 0.7774\n","Epoch 4/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4571 - acc: 0.7827 - val_loss: 0.4614 - val_acc: 0.7810\n","Epoch 5/5\n","3500/3500 [==============================] - 35s 10ms/step - loss: 0.4520 - acc: 0.7859 - val_loss: 0.4578 - val_acc: 0.7820\n"]}],"source":["\n","path_to_glove_file = \"drive/My Drive/Machine Learning/Assignment3/glove.6B.100d.txt\"\n","embeddings_index = {}\n","with open(path_to_glove_file) as f:\n","    for line in f:\n","        word, coefs = line.split(maxsplit=1)\n","        coefs = np.fromstring(coefs, \"f\", sep=\" \")\n","        embeddings_index[word] = coefs\n","\n","embedding_dim = 100\n","\n","word_index = dict(zip(vocabulary, range(len(vocabulary))))\n","\n","embedding_matrix = np.zeros((10000, embedding_dim))\n","for word, i in word_index.items():\n","    if i <10000:\n","        embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector\n","\n","model = Sequential()\n","model.add(Embedding(max_features, 100,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(Bidirectional(LSTM(32)))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":52214,"status":"ok","timestamp":1668091250064,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"outputId":"e48adc41-e11f-463a-aae0-aeac4316de30","id":"otMiZhg68w0s"},"outputs":[{"output_type":"stream","name":"stdout","text":["15000/15000 [==============================] - 49s 3ms/step\n","Experiment#11--> Accuracy:  0.7823125  \tPrecision:  0.7883093341503268 \tRecall:  0.7719125 \tF1-Score:  0.7800247574777687\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl' ,'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#11--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n"," \n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["# Experiment 12"],"metadata":{"id":"9pzr19Q6gqHx"}},{"cell_type":"markdown","metadata":{"id":"H4x_K3Jy8w0t"},"source":["Experiment 12: RNN with an embedding layer and three hidden layers (128,64, 32) by Using Glove with 100d"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":138682,"status":"ok","timestamp":1668091506068,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"outputId":"2fb5fcfd-4d7e-4a4d-ef73-024a54031e68","id":"n0NTzfZZ8w0t"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_2 (Embedding)     (None, None, 100)         1000000   \n","                                                                 \n"," bidirectional_2 (Bidirectio  (None, 64)               34048     \n"," nal)                                                            \n","                                                                 \n"," dense_7 (Dense)             (None, 128)               8320      \n","                                                                 \n"," dense_8 (Dense)             (None, 64)                8256      \n","                                                                 \n"," dense_9 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dense_10 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,052,737\n","Trainable params: 52,737\n","Non-trainable params: 1,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 46s 12ms/step - loss: 0.5153 - acc: 0.7430 - val_loss: 0.4861 - val_acc: 0.7638\n","Epoch 2/5\n","3500/3500 [==============================] - 37s 10ms/step - loss: 0.4779 - acc: 0.7698 - val_loss: 0.4731 - val_acc: 0.7748\n","Epoch 3/5\n","3500/3500 [==============================] - 37s 11ms/step - loss: 0.4660 - acc: 0.7772 - val_loss: 0.4650 - val_acc: 0.7782\n","Epoch 4/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4585 - acc: 0.7819 - val_loss: 0.4697 - val_acc: 0.7742\n","Epoch 5/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4528 - acc: 0.7856 - val_loss: 0.4588 - val_acc: 0.7818\n"]}],"source":["model = Sequential()\n","model.add(Embedding(max_features, 100,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(Bidirectional(LSTM(32)))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":83604,"status":"ok","timestamp":1668091590340,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"outputId":"39d0e4a5-206c-4c43-d254-b0d8040831b6","id":"VViiqXAJ8w0t"},"outputs":[{"output_type":"stream","name":"stdout","text":["15000/15000 [==============================] - 49s 3ms/step\n","Experiment#12--> Accuracy:  0.7823375  \tPrecision:  0.7878424875748694 \tRecall:  0.772775 \tF1-Score:  0.78023600681517\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#12--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["#Experiment 13"],"metadata":{"id":"v04pUn46g66c"}},{"cell_type":"markdown","metadata":{"id":"gO1nKor18w0t"},"source":["Experiment 13: LSTM with an embedding layer and two hidden layers (64, 32) by Using Glove-twitter with 100d"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pB76VolK8w0t"},"outputs":[],"source":["vocabulary = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/vocab.pkl', 'rb'))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AGeANu5W8w0t"},"outputs":[],"source":["path_to_glove_file = \"drive/My Drive/Machine Learning/Assignment3/glove.twitter.27B.100d.txt\"\n","embeddings_index = {}\n","with open(path_to_glove_file) as f:\n","    for line in f:\n","        word, coefs = line.split(maxsplit=1)\n","        coefs = np.fromstring(coefs, \"f\", sep=\" \")\n","        embeddings_index[word] = coefs\n","\n","embedding_dim = 100\n","\n","word_index = dict(zip(vocabulary, range(len(vocabulary))))\n","\n","embedding_matrix = np.zeros((10000, embedding_dim))\n","for word, i in word_index.items():\n","    if i <10000:\n","        embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":201607,"status":"ok","timestamp":1668093133512,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"outputId":"dc0694b7-0fc9-410c-8655-111713f1948c","id":"Zr18apVa8w0u"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_3 (Embedding)     (None, None, 100)         1000000   \n","                                                                 \n"," bidirectional_3 (Bidirectio  (None, 64)               34048     \n"," nal)                                                            \n","                                                                 \n"," dense_11 (Dense)            (None, 64)                4160      \n","                                                                 \n"," dense_12 (Dense)            (None, 32)                2080      \n","                                                                 \n"," dense_13 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,040,321\n","Trainable params: 40,321\n","Non-trainable params: 1,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 47s 13ms/step - loss: 0.4859 - acc: 0.7635 - val_loss: 0.4660 - val_acc: 0.7773\n","Epoch 2/5\n","3500/3500 [==============================] - 45s 13ms/step - loss: 0.4585 - acc: 0.7816 - val_loss: 0.4631 - val_acc: 0.7805\n","Epoch 3/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4492 - acc: 0.7873 - val_loss: 0.4511 - val_acc: 0.7851\n","Epoch 4/5\n","3500/3500 [==============================] - 35s 10ms/step - loss: 0.4430 - acc: 0.7907 - val_loss: 0.4462 - val_acc: 0.7889\n","Epoch 5/5\n","3500/3500 [==============================] - 38s 11ms/step - loss: 0.4383 - acc: 0.7936 - val_loss: 0.4458 - val_acc: 0.7893\n"]}],"source":["model = Sequential()\n","model.add(Embedding(10000, 100,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(Bidirectional(LSTM(32)))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":84908,"status":"ok","timestamp":1668093218402,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"outputId":"af7918f0-65c7-4c9c-d7fe-b61671eda589","id":"cZxv0Q7D8w0u"},"outputs":[{"output_type":"stream","name":"stdout","text":["15000/15000 [==============================] - 64s 4ms/step\n","Experiment#13--> Accuracy:  0.7907229166666667  \tPrecision:  0.7804525119679728 \tRecall:  0.8090333333333334 \tF1-Score:  0.7944859642913406\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#13--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["# Experiment 14"],"metadata":{"id":"hFF3izsjhA3o"}},{"cell_type":"markdown","metadata":{"id":"lubVrn5p8w0u"},"source":["Experiment 14: LSTM with an embedding layer and three hidden layers (128, 64, 32) by Using Glove-twitter with 100d"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":205969,"status":"ok","timestamp":1668093424296,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"outputId":"88dbf38e-9416-4db9-92eb-0eb230f166fd","id":"N52rewTi8w0u"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_4 (Embedding)     (None, None, 100)         1000000   \n","                                                                 \n"," bidirectional_4 (Bidirectio  (None, 64)               34048     \n"," nal)                                                            \n","                                                                 \n"," dense_14 (Dense)            (None, 128)               8320      \n","                                                                 \n"," dense_15 (Dense)            (None, 64)                8256      \n","                                                                 \n"," dense_16 (Dense)            (None, 32)                2080      \n","                                                                 \n"," dense_17 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1,052,737\n","Trainable params: 52,737\n","Non-trainable params: 1,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 43s 11ms/step - loss: 0.4879 - acc: 0.7615 - val_loss: 0.4720 - val_acc: 0.7759\n","Epoch 2/5\n","3500/3500 [==============================] - 40s 11ms/step - loss: 0.4602 - acc: 0.7801 - val_loss: 0.4678 - val_acc: 0.7786\n","Epoch 3/5\n","3500/3500 [==============================] - 37s 11ms/step - loss: 0.4503 - acc: 0.7865 - val_loss: 0.4502 - val_acc: 0.7868\n","Epoch 4/5\n","3500/3500 [==============================] - 37s 11ms/step - loss: 0.4440 - acc: 0.7904 - val_loss: 0.4484 - val_acc: 0.7872\n","Epoch 5/5\n","3500/3500 [==============================] - 37s 11ms/step - loss: 0.4392 - acc: 0.7932 - val_loss: 0.4468 - val_acc: 0.7882\n"]}],"source":["model = Sequential()\n","model.add(Embedding(10000, 100,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(Bidirectional(LSTM(32)))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":84041,"status":"ok","timestamp":1668093508308,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"},"user_tz":-300},"outputId":"7b6255b3-1e62-4af9-a2e6-b7d35627726e","id":"qjJsk56x8w0u"},"outputs":[{"output_type":"stream","name":"stdout","text":["15000/15000 [==============================] - 49s 3ms/step\n","Experiment#14--> Accuracy:  0.789775  \tPrecision:  0.791197012075636 \tRecall:  0.7873333333333333 \tF1-Score:  0.7892604442513805\n"]}],"source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#14--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"]},{"cell_type":"markdown","source":["# Experiment 15"],"metadata":{"id":"lkreRZ9phMCj"}},{"cell_type":"markdown","metadata":{"id":"jdlFm06z8w0u"},"source":["Experiment 15: LSTM with an embedding layer and two hidden layers (64, 32) by Using fastex with 300d"]},{"cell_type":"code","source":["vocabulary = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/vocab.pkl', 'rb'))"],"metadata":{"id":"aK8CestROjYJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"P-ZKFR7y8w0u"},"outputs":[],"source":["path_to_glove_file = \"/content/drive/MyDrive/Colab Notebooks/Machine Learning/Datasets/FastText(wiki-news-300d-1M).vec\"\n","embeddings_index = {}\n","with open(path_to_glove_file) as f:\n","    for line in f:\n","        word, coefs = line.split(maxsplit=1)\n","        coefs = np.fromstring(coefs, \"f\", sep=\" \")\n","        embeddings_index[word] = coefs\n","\n","embedding_dim = 300\n","\n","word_index = dict(zip(vocabulary, range(len(vocabulary))))\n","\n","embedding_matrix = np.zeros((10000, embedding_dim))\n","for word, i in word_index.items():\n","    if i <10000:\n","        embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668093752218,"user_tz":-300,"elapsed":189464,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"0c6af2fe-5c54-4a42-aef9-6bd22596dc3f","id":"zoGizbYl8w0v"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_6\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_5 (Embedding)     (None, None, 300)         3000000   \n","                                                                 \n"," bidirectional_5 (Bidirectio  (None, 64)               85248     \n"," nal)                                                            \n","                                                                 \n"," dense_18 (Dense)            (None, 64)                4160      \n","                                                                 \n"," dense_19 (Dense)            (None, 32)                2080      \n","                                                                 \n"," dense_20 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 3,091,521\n","Trainable params: 91,521\n","Non-trainable params: 3,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 41s 11ms/step - loss: 0.4937 - acc: 0.7589 - val_loss: 0.4680 - val_acc: 0.7755\n","Epoch 2/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4609 - acc: 0.7802 - val_loss: 0.4581 - val_acc: 0.7827\n","Epoch 3/5\n","3500/3500 [==============================] - 37s 11ms/step - loss: 0.4491 - acc: 0.7876 - val_loss: 0.4475 - val_acc: 0.7879\n","Epoch 4/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4415 - acc: 0.7924 - val_loss: 0.4439 - val_acc: 0.7900\n","Epoch 5/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4356 - acc: 0.7958 - val_loss: 0.4429 - val_acc: 0.7919\n"]}],"source":["model = Sequential()\n","model.add(Embedding(10000, 300,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(Bidirectional(LSTM(32)))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"]},{"cell_type":"code","source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#15--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668093850464,"user_tz":-300,"elapsed":98275,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"b6a9aca0-30a6-4fb0-c1de-a080673591e7","id":"GofVlY7y8w0v"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15000/15000 [==============================] - 58s 4ms/step\n"]}]},{"cell_type":"markdown","source":["# Experiment 16"],"metadata":{"id":"2dce9cH4hV5k"}},{"cell_type":"markdown","source":["Experiment 16: LSTM with an embedding layer and three hidden layers (128,64, 32) by Using fastex with 300d"],"metadata":{"id":"c5eLmhxD8w0v"}},{"cell_type":"code","source":["model = Sequential()\n","model.add(Embedding(10000, 300,embeddings_initializer=keras.initializers.Constant(embedding_matrix),\n","    trainable=False,))\n","\n","model.add(Bidirectional(LSTM(32)))\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","history = model.fit(X_train, y_train,\n","                    epochs=5,\n","                    batch_size=256,\n","                    validation_split=0.2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668095713660,"user_tz":-300,"elapsed":194846,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"f4a49999-35e5-463e-d6f1-c43b55497b44","id":"7XbYcip78w0v"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, None, 300)         3000000   \n","                                                                 \n"," bidirectional (Bidirectiona  (None, 64)               85248     \n"," l)                                                              \n","                                                                 \n"," dense (Dense)               (None, 128)               8320      \n","                                                                 \n"," dense_1 (Dense)             (None, 64)                8256      \n","                                                                 \n"," dense_2 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dense_3 (Dense)             (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 3,103,937\n","Trainable params: 103,937\n","Non-trainable params: 3,000,000\n","_________________________________________________________________\n","Epoch 1/5\n","3500/3500 [==============================] - 48s 12ms/step - loss: 0.4931 - acc: 0.7596 - val_loss: 0.4736 - val_acc: 0.7718\n","Epoch 2/5\n","3500/3500 [==============================] - 37s 10ms/step - loss: 0.4621 - acc: 0.7796 - val_loss: 0.4568 - val_acc: 0.7827\n","Epoch 3/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4515 - acc: 0.7862 - val_loss: 0.4596 - val_acc: 0.7829\n","Epoch 4/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4448 - acc: 0.7901 - val_loss: 0.4459 - val_acc: 0.7892\n","Epoch 5/5\n","3500/3500 [==============================] - 36s 10ms/step - loss: 0.4400 - acc: 0.7927 - val_loss: 0.4455 - val_acc: 0.7897\n"]}]},{"cell_type":"code","source":["y_pred = model.predict(X_test)\n","performanceArray = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'rb'))\n","\n","accuracy = accuracy_score(y_test,y_pred.round())\n","precision = precision_score(y_test,y_pred.round())\n","recall=recall_score(y_test,y_pred.round())\n","f1 = f1_score(y_test,y_pred.round())\n","performanceArray.append([accuracy,precision,recall,f1])\n","print('Experiment#16--> Accuracy: ',accuracy,' \\tPrecision: ',precision,'\\tRecall: ',recall,'\\tF1-Score: ',f1)\n","\n","pickle.dump(performanceArray, open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl', 'wb'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668095775195,"user_tz":-300,"elapsed":61548,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"3afa1157-7807-4dc9-ec2e-4e25e2cddf82","id":"S5-vzGP58w0v"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15000/15000 [==============================] - 57s 4ms/step\n","Experiment#16--> Accuracy:  0.7917604166666666  \tPrecision:  0.7812137300653411 \tRecall:  0.8105125 \tF1-Score:  0.7955934650440388\n"]}]},{"cell_type":"markdown","source":["#Comparison between all 16 Experiments"],"metadata":{"id":"OHJAKngEhf0Y"}},{"cell_type":"code","source":["summary = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Machine Learning/Assignments/result.pkl','rb'))\n","\n","description = [\"Eperiment# 1:  RNN with two Hidden Layers and word embedding from data\",\"Eperiment# 2:  RNN with three Hidden Layers and word embedding from data\",\"Eperiment# 3:  RNN with two Hidden Layers and pre-trained Glove word embedding\",\"Eperiment# 4:  RNN with three Hidden Layers and pre-trained Glove word embedding\",\"Eperiment# 5:  RNN with two Hidden Layer and pre-trained Glove-Twitter word embedding\",\"Eperiment# 6:  RNN with three Hidden Layer and pre-trained Glove-Twitter word embedding\",\"Eperiment# 7:  RNN with two Hidden Layer and pre-trained fastText word embedding\",\"Eperiment# 8:  RNN with three Hidden Layer and pre-trained fastText word embedding\",\"Eperiment# 9:  LSTM with two Hidden Layers and word embedding from data\",\"Eperiment# 10: LSTM with three Hidden Layers and word embedding from data\",\"Eperiment# 11: LSTM with two Hidden Layers and pre-trained Glove word embedding\",\"Eperiment# 12: LSTM with three Hidden Layers and pre-trained Glove word embedding\",\"Eperiment# 13: LSTM with two Hidden Layer and pre-trained Glove-Twitter word embedding\",\"Eperiment# 14: LSTM with three Hidden Layer and pre-trained Glove-Twitter word embedding\",\"Eperiment# 15: LSTM with two Hidden Layer and pre-trained fastText word embedding\",\"Eperiment# 16: LSTM with three Hidden Layer and pre-trained fastText word embedding\"]\n","\n","accuracy = []\n","precision= []\n","recall=[]\n","f1=[]\n","\n","for i in range(16):\n","    accuracy.append(summary[i][0])\n","    precision.append(summary[i][1])\n","    recall.append(summary[i][2])\n","    f1.append(summaryi][2])\n","   \n"],"metadata":{"id":"4XQ-C8owRkkQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = {'Experiment Description': description, 'Accuracy':accuracy,'Precision':precision,'Recall':recall,'F1-Score':f1 }  \n","result = pd.DataFrame(data)"],"metadata":{"id":"x70LtLg8F4WN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":715},"id":"iU8AfoFIF_2O","executionInfo":{"status":"ok","timestamp":1668109834846,"user_tz":-300,"elapsed":17,"user":{"displayName":"Abdul Hafeez Abdul Ghaffar","userId":"01654366301128895829"}},"outputId":"04d0bd6a-06f2-49a3-aa26-0b40213f27e5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                               Experiment Description  Accuracy  Precision  \\\n","0   Eperiment# 1:  RNN with two Hidden Layers and ...  0.778352   0.779305   \n","1   Eperiment# 2:  RNN with three Hidden Layers an...  0.762073   0.817371   \n","2   Eperiment# 3:  RNN with two Hidden Layers and ...  0.729423   0.799285   \n","3   Eperiment# 4:  RNN with three Hidden Layers an...  0.732871   0.802649   \n","4   Eperiment# 5:  RNN with two Hidden Layer and p...  0.767127   0.781146   \n","5   Eperiment# 6:  RNN with three Hidden Layer and...  0.760329   0.794468   \n","6   Eperiment# 7:  RNN with two Hidden Layer and p...  0.750356   0.815968   \n","7   Eperiment# 8:  RNN with three Hidden Layer and...  0.762240   0.744316   \n","8   Eperiment# 9:  LSTM with two Hidden Layers and...  0.794333   0.801419   \n","9   Eperiment# 10: LSTM with three Hidden Layers a...  0.795852   0.791838   \n","10  Eperiment# 11: LSTM with two Hidden Layers and...  0.782312   0.788309   \n","11  Eperiment# 12: LSTM with three Hidden Layers a...  0.782338   0.787842   \n","12  Eperiment# 13: LSTM with two Hidden Layer and ...  0.790723   0.780453   \n","13  Eperiment# 14: LSTM with three Hidden Layer an...  0.789775   0.791197   \n","14  Eperiment# 15: LSTM with two Hidden Layer and ...  0.793150   0.786417   \n","15  Eperiment# 16: LSTM with three Hidden Layer an...  0.791760   0.781214   \n","\n","      Recall  F1-Score  \n","0   0.776646  0.776646  \n","1   0.674954  0.674954  \n","2   0.612708  0.612708  \n","3   0.617592  0.617592  \n","4   0.742196  0.742196  \n","5   0.702363  0.702363  \n","6   0.646529  0.646529  \n","7   0.798921  0.798921  \n","8   0.782579  0.782579  \n","9   0.802729  0.802729  \n","10  0.771913  0.771913  \n","11  0.772775  0.772775  \n","12  0.809033  0.809033  \n","13  0.787333  0.787333  \n","14  0.804904  0.804904  \n","15  0.810512  0.810512  "],"text/html":["\n","  <div id=\"df-5c07ad29-a36c-4aa0-b8d2-bd2190980b27\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Experiment Description</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1-Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Eperiment# 1:  RNN with two Hidden Layers and ...</td>\n","      <td>0.778352</td>\n","      <td>0.779305</td>\n","      <td>0.776646</td>\n","      <td>0.776646</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Eperiment# 2:  RNN with three Hidden Layers an...</td>\n","      <td>0.762073</td>\n","      <td>0.817371</td>\n","      <td>0.674954</td>\n","      <td>0.674954</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Eperiment# 3:  RNN with two Hidden Layers and ...</td>\n","      <td>0.729423</td>\n","      <td>0.799285</td>\n","      <td>0.612708</td>\n","      <td>0.612708</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Eperiment# 4:  RNN with three Hidden Layers an...</td>\n","      <td>0.732871</td>\n","      <td>0.802649</td>\n","      <td>0.617592</td>\n","      <td>0.617592</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Eperiment# 5:  RNN with two Hidden Layer and p...</td>\n","      <td>0.767127</td>\n","      <td>0.781146</td>\n","      <td>0.742196</td>\n","      <td>0.742196</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Eperiment# 6:  RNN with three Hidden Layer and...</td>\n","      <td>0.760329</td>\n","      <td>0.794468</td>\n","      <td>0.702363</td>\n","      <td>0.702363</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Eperiment# 7:  RNN with two Hidden Layer and p...</td>\n","      <td>0.750356</td>\n","      <td>0.815968</td>\n","      <td>0.646529</td>\n","      <td>0.646529</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Eperiment# 8:  RNN with three Hidden Layer and...</td>\n","      <td>0.762240</td>\n","      <td>0.744316</td>\n","      <td>0.798921</td>\n","      <td>0.798921</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Eperiment# 9:  LSTM with two Hidden Layers and...</td>\n","      <td>0.794333</td>\n","      <td>0.801419</td>\n","      <td>0.782579</td>\n","      <td>0.782579</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Eperiment# 10: LSTM with three Hidden Layers a...</td>\n","      <td>0.795852</td>\n","      <td>0.791838</td>\n","      <td>0.802729</td>\n","      <td>0.802729</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>Eperiment# 11: LSTM with two Hidden Layers and...</td>\n","      <td>0.782312</td>\n","      <td>0.788309</td>\n","      <td>0.771913</td>\n","      <td>0.771913</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>Eperiment# 12: LSTM with three Hidden Layers a...</td>\n","      <td>0.782338</td>\n","      <td>0.787842</td>\n","      <td>0.772775</td>\n","      <td>0.772775</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>Eperiment# 13: LSTM with two Hidden Layer and ...</td>\n","      <td>0.790723</td>\n","      <td>0.780453</td>\n","      <td>0.809033</td>\n","      <td>0.809033</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>Eperiment# 14: LSTM with three Hidden Layer an...</td>\n","      <td>0.789775</td>\n","      <td>0.791197</td>\n","      <td>0.787333</td>\n","      <td>0.787333</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>Eperiment# 15: LSTM with two Hidden Layer and ...</td>\n","      <td>0.793150</td>\n","      <td>0.786417</td>\n","      <td>0.804904</td>\n","      <td>0.804904</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>Eperiment# 16: LSTM with three Hidden Layer an...</td>\n","      <td>0.791760</td>\n","      <td>0.781214</td>\n","      <td>0.810512</td>\n","      <td>0.810512</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c07ad29-a36c-4aa0-b8d2-bd2190980b27')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5c07ad29-a36c-4aa0-b8d2-bd2190980b27 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5c07ad29-a36c-4aa0-b8d2-bd2190980b27');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["## Result\n"],"metadata":{"id":"4Ve3KWSwGIJr"}},{"cell_type":"markdown","source":["**Eperiment 10 performs better has best performance than others beacuse it has good accuracy, precision, recall, and F1-Score.**"],"metadata":{"id":"L139K3Ixh34X"}}],"metadata":{"colab":{"provenance":[],"toc_visible":true},"gpuClass":"standard","kernelspec":{"display_name":"Python 3.10.6 64-bit","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.6"},"vscode":{"interpreter":{"hash":"fbc768028c3e6ead51d9a200ddcb2ec858ae62844dcd1994729a8279be9b48f2"}}},"nbformat":4,"nbformat_minor":0}